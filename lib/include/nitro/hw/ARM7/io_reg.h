//
// DO NOT MODIFY THIS FILE! It is auto-generated from io_reg_arm7.json and Inja template io_reg.json.txt
//


#ifndef NITRO_HW_ARM7_IO_REG_H_
#define NITRO_HW_ARM7_IO_REG_H_


#define REG_VCOUNT_OFFSET 0x6
#define REG_VCOUNT_ADDR (HW_REG_BASE + REG_VCOUNT_OFFSET)
#define reg_GX_VCOUNT (*(REGType16v *)REG_VCOUNT_ADDR)  // =0x4000006

#define REG_DMA0SAD_OFFSET 0xB0
#define REG_DMA0SAD_ADDR (HW_REG_BASE + REG_DMA0SAD_OFFSET)
#define reg_MI_DMA0SAD (*(REGType32v *)REG_DMA0SAD_ADDR)  // =0x40000B0

#define REG_DMA0DAD_OFFSET 0xB4
#define REG_DMA0DAD_ADDR (HW_REG_BASE + REG_DMA0DAD_OFFSET)
#define reg_MI_DMA0DAD (*(REGType32v *)REG_DMA0DAD_ADDR)  // =0x40000B4

#define REG_DMA0CNT_OFFSET 0xB8
#define REG_DMA0CNT_ADDR (HW_REG_BASE + REG_DMA0CNT_OFFSET)
#define reg_MI_DMA0CNT (*(REGType32v *)REG_DMA0CNT_ADDR)  // =0x40000B8

#define REG_DMA1DAD_OFFSET 0xC0
#define REG_DMA1DAD_ADDR (HW_REG_BASE + REG_DMA1DAD_OFFSET)
#define reg_MI_DMA1DAD (*(REGType32v *)REG_DMA1DAD_ADDR)  // =0x40000C0

#define REG_DMA1CNT_OFFSET 0xC4
#define REG_DMA1CNT_ADDR (HW_REG_BASE + REG_DMA1CNT_OFFSET)
#define reg_MI_DMA1CNT (*(REGType32v *)REG_DMA1CNT_ADDR)  // =0x40000C4

#define REG_DMA2DAD_OFFSET 0xCC
#define REG_DMA2DAD_ADDR (HW_REG_BASE + REG_DMA2DAD_OFFSET)
#define reg_MI_DMA2DAD (*(REGType32v *)REG_DMA2DAD_ADDR)  // =0x40000CC

#define REG_DMA2CNT_OFFSET 0xD0
#define REG_DMA2CNT_ADDR (HW_REG_BASE + REG_DMA2CNT_OFFSET)
#define reg_MI_DMA2CNT (*(REGType32v *)REG_DMA2CNT_ADDR)  // =0x40000D0

#define REG_DMA3CNT_OFFSET 0xDC
#define REG_DMA3CNT_ADDR (HW_REG_BASE + REG_DMA3CNT_OFFSET)
#define reg_MI_DMA3CNT (*(REGType32v *)REG_DMA3CNT_ADDR)  // =0x40000DC

#define REG_SIOMULTI0_OFFSET 0x120
#define REG_SIOMULTI0_ADDR (HW_REG_BASE + REG_SIOMULTI0_OFFSET)
#define reg_EXI_SIOMULTI0 (*(REGType16v *)REG_SIOMULTI0_ADDR)  // =0x4000120

#define REG_SIOMULTI1_OFFSET 0x122
#define REG_SIOMULTI1_ADDR (HW_REG_BASE + REG_SIOMULTI1_OFFSET)
#define reg_EXI_SIOMULTI1 (*(REGType16v *)REG_SIOMULTI1_ADDR)  // =0x4000122

#define REG_SIOMULTI2_OFFSET 0x124
#define REG_SIOMULTI2_ADDR (HW_REG_BASE + REG_SIOMULTI2_OFFSET)
#define reg_EXI_SIOMULTI2 (*(REGType16v *)REG_SIOMULTI2_ADDR)  // =0x4000124

#define REG_SIOMULTI3_OFFSET 0x126
#define REG_SIOMULTI3_ADDR (HW_REG_BASE + REG_SIOMULTI3_OFFSET)
#define reg_EXI_SIOMULTI3 (*(REGType16v *)REG_SIOMULTI3_ADDR)  // =0x4000126

#define REG_SIOCNT_OFFSET 0x128
#define REG_SIOCNT_ADDR (HW_REG_BASE + REG_SIOCNT_OFFSET)
#define reg_EXI_SIOCNT (*(REGType16v *)REG_SIOCNT_ADDR)  // =0x4000128

#define REG_SIOCNT_MULTI_OFFSET 0x128
#define REG_SIOCNT_MULTI_ADDR (HW_REG_BASE + REG_SIOCNT_MULTI_OFFSET)
#define reg_EXI_SIOCNT_MULTI (*(REGType16v *)REG_SIOCNT_MULTI_ADDR)  // =0x4000128

#define REG_SIOCNT_UART_OFFSET 0x128
#define REG_SIOCNT_UART_ADDR (HW_REG_BASE + REG_SIOCNT_UART_OFFSET)
#define reg_EXI_SIOCNT_UART (*(REGType16v *)REG_SIOCNT_UART_ADDR)  // =0x4000128

#define REG_SIOCNT_H_OFFSET 0x12A
#define REG_SIOCNT_H_ADDR (HW_REG_BASE + REG_SIOCNT_H_OFFSET)
#define reg_EXI_SIOCNT_H (*(REGType16v *)REG_SIOCNT_H_ADDR)  // =0x400012A

#define REG_SIOMLT_SEND_OFFSET 0x12A
#define REG_SIOMLT_SEND_ADDR (HW_REG_BASE + REG_SIOMLT_SEND_OFFSET)
#define reg_EXI_SIOMLT_SEND (*(REGType16v *)REG_SIOMLT_SEND_ADDR)  // =0x400012A

#define REG_SIODATA8_OFFSET 0x12A
#define REG_SIODATA8_ADDR (HW_REG_BASE + REG_SIODATA8_OFFSET)
#define reg_EXI_SIODATA8 (*(REGType16v *)REG_SIODATA8_ADDR)  // =0x400012A

#define REG_KEYINPUT_OFFSET 0x130
#define REG_KEYINPUT_ADDR (HW_REG_BASE + REG_KEYINPUT_OFFSET)
#define reg_PAD_KEYINPUT (*(REGType16v *)REG_KEYINPUT_ADDR)  // =0x4000130

#define REG_RCNT0_L_OFFSET 0x134
#define REG_RCNT0_L_ADDR (HW_REG_BASE + REG_RCNT0_L_OFFSET)
#define reg_EXI_RCNT0_L (*(REGType16v *)REG_RCNT0_L_ADDR)  // =0x4000134
#if !defined(SDK_TS)
#define REG_RCNT0_H_OFFSET 0x136
#define REG_RCNT0_H_ADDR (HW_REG_BASE + REG_RCNT0_H_OFFSET)
#define reg_EXI_RCNT0_H (*(REGType16v *)REG_RCNT0_H_ADDR)  // =0x4000136
#endif //!defined(SDK_TS)
#if defined(SDK_TS)
#define REG_RCNT0_H_OFFSET 0x136
#define REG_RCNT0_H_ADDR (HW_REG_BASE + REG_RCNT0_H_OFFSET)
#define reg_EXI_RCNT0_H (*(REGType16v *)REG_RCNT0_H_ADDR)  // =0x4000136
#endif //defined(SDK_TS)
#if !defined(SDK_TS)
#define REG_RCNT1_OFFSET 0x138
#define REG_RCNT1_ADDR (HW_REG_BASE + REG_RCNT1_OFFSET)
#define reg_EXI_RCNT1 (*(REGType16v *)REG_RCNT1_ADDR)  // =0x4000138
#endif //!defined(SDK_TS)
#if defined(SDK_TS)
#define REG_RCNT1_OFFSET 0x138
#define REG_RCNT1_ADDR (HW_REG_BASE + REG_RCNT1_OFFSET)
#define reg_EXI_RCNT1 (*(REGType16v *)REG_RCNT1_ADDR)  // =0x4000138
#endif //defined(SDK_TS)

#define REG_JOYCNT_OFFSET 0x140
#define REG_JOYCNT_ADDR (HW_REG_BASE + REG_JOYCNT_OFFSET)
#define reg_EXI_JOYCNT (*(REGType16v *)REG_JOYCNT_ADDR)  // =0x4000140

#define REG_JOY_RECV_OFFSET 0x150
#define REG_JOY_RECV_ADDR (HW_REG_BASE + REG_JOY_RECV_OFFSET)
#define reg_EXI_JOY_RECV (*(REGType32v *)REG_JOY_RECV_ADDR)  // =0x4000150

#define REG_JOY_TRANS_OFFSET 0x154
#define REG_JOY_TRANS_ADDR (HW_REG_BASE + REG_JOY_TRANS_OFFSET)
#define reg_EXI_JOY_TRANS (*(REGType32v *)REG_JOY_TRANS_ADDR)  // =0x4000154

#define REG_JOY_STAT_OFFSET 0x158
#define REG_JOY_STAT_ADDR (HW_REG_BASE + REG_JOY_STAT_OFFSET)
#define reg_EXI_JOY_STAT (*(REGType16v *)REG_JOY_STAT_ADDR)  // =0x4000158

#define REG_MAINPINTF_OFFSET 0x180
#define REG_MAINPINTF_ADDR (HW_REG_BASE + REG_MAINPINTF_OFFSET)
#define reg_PXI_MAINPINTF (*(REGType16v *)REG_MAINPINTF_ADDR)  // =0x4000180

#define REG_MAINP_FIFO_CNT_OFFSET 0x184
#define REG_MAINP_FIFO_CNT_ADDR (HW_REG_BASE + REG_MAINP_FIFO_CNT_OFFSET)
#define reg_PXI_MAINP_FIFO_CNT (*(REGType16v *)REG_MAINP_FIFO_CNT_ADDR)  // =0x4000184
#if !defined(SDK_TS)
#define REG_SPICNT_OFFSET 0x1C0
#define REG_SPICNT_ADDR (HW_REG_BASE + REG_SPICNT_OFFSET)
#define reg_SPI_SPICNT (*(REGType16v *)REG_SPICNT_ADDR)  // =0x40001C0
#endif //!defined(SDK_TS)
#if defined(SDK_TS)
#define REG_SPICNT_OFFSET 0x1C0
#define REG_SPICNT_ADDR (HW_REG_BASE + REG_SPICNT_OFFSET)
#define reg_SPI_SPICNT (*(REGType16v *)REG_SPICNT_ADDR)  // =0x40001C0
#endif //defined(SDK_TS)

#define REG_SPID_OFFSET 0x1C2
#define REG_SPID_ADDR (HW_REG_BASE + REG_SPID_OFFSET)
#define reg_SPI_SPID (*(REGType16v *)REG_SPID_ADDR)  // =0x40001C2

#define REG_EXMEMCNT_L_OFFSET 0x204
#define REG_EXMEMCNT_L_ADDR (HW_REG_BASE + REG_EXMEMCNT_L_OFFSET)
#define reg_MI_EXMEMCNT_L (*(REGType16v *)REG_EXMEMCNT_L_ADDR)  // =0x4000204

#define REG_EXMEMCNT_H_OFFSET 0x206
#define REG_EXMEMCNT_H_ADDR (HW_REG_BASE + REG_EXMEMCNT_H_OFFSET)
#define reg_MI_EXMEMCNT_H (*(REGType16v *)REG_EXMEMCNT_H_ADDR)  // =0x4000206

#define REG_IE_OFFSET 0x210
#define REG_IE_ADDR (HW_REG_BASE + REG_IE_OFFSET)
#define reg_OS_IE (*(REGType32v *)REG_IE_ADDR)  // =0x4000210

#define REG_IF_OFFSET 0x214
#define REG_IF_ADDR (HW_REG_BASE + REG_IF_OFFSET)
#define reg_OS_IF (*(REGType32v *)REG_IF_ADDR)  // =0x4000214

#define REG_WVRAMSTAT_OFFSET 0x240
#define REG_WVRAMSTAT_ADDR (HW_REG_BASE + REG_WVRAMSTAT_OFFSET)
#define reg_MI_WVRAMSTAT (*(REGType16v *)REG_WVRAMSTAT_ADDR)  // =0x4000240

#define REG_POWCNT_OFFSET 0x304
#define REG_POWCNT_ADDR (HW_REG_BASE + REG_POWCNT_OFFSET)
#define reg_SND_POWCNT (*(REGType16v *)REG_POWCNT_ADDR)  // =0x4000304

#define REG_SOUND0CNT_OFFSET 0x400
#define REG_SOUND0CNT_ADDR (HW_REG_BASE + REG_SOUND0CNT_OFFSET)
#define reg_SND_SOUND0CNT (*(REGType32v *)REG_SOUND0CNT_ADDR)  // =0x4000400

#define REG_SOUND0CNT_VOL_16_OFFSET 0x400
#define REG_SOUND0CNT_VOL_16_ADDR (HW_REG_BASE + REG_SOUND0CNT_VOL_16_OFFSET)
#define reg_SND_SOUND0CNT_VOL_16 (*(REGType16v *)REG_SOUND0CNT_VOL_16_ADDR)  // =0x4000400

#define REG_SOUND0CNT_VOL_OFFSET 0x400
#define REG_SOUND0CNT_VOL_ADDR (HW_REG_BASE + REG_SOUND0CNT_VOL_OFFSET)
#define reg_SND_SOUND0CNT_VOL (*(REGType8v *)REG_SOUND0CNT_VOL_ADDR)  // =0x4000400

#define REG_SOUND0CNT_PAN_OFFSET 0x402
#define REG_SOUND0CNT_PAN_ADDR (HW_REG_BASE + REG_SOUND0CNT_PAN_OFFSET)
#define reg_SND_SOUND0CNT_PAN (*(REGType8v *)REG_SOUND0CNT_PAN_ADDR)  // =0x4000402

#define REG_SOUND0CNT_8_OFFSET 0x403
#define REG_SOUND0CNT_8_ADDR (HW_REG_BASE + REG_SOUND0CNT_8_OFFSET)
#define reg_SND_SOUND0CNT_8 (*(REGType8v *)REG_SOUND0CNT_8_ADDR)  // =0x4000403

#define REG_SOUND0SAD_OFFSET 0x404
#define REG_SOUND0SAD_ADDR (HW_REG_BASE + REG_SOUND0SAD_OFFSET)
#define reg_SND_SOUND0SAD (*(REGType32v *)REG_SOUND0SAD_ADDR)  // =0x4000404

#define REG_SOUND0TMR_OFFSET 0x408
#define REG_SOUND0TMR_ADDR (HW_REG_BASE + REG_SOUND0TMR_OFFSET)
#define reg_SND_SOUND0TMR (*(REGType16v *)REG_SOUND0TMR_ADDR)  // =0x4000408

#define REG_SOUND0RPT_PT_OFFSET 0x40A
#define REG_SOUND0RPT_PT_ADDR (HW_REG_BASE + REG_SOUND0RPT_PT_OFFSET)
#define reg_SND_SOUND0RPT_PT (*(REGType16v *)REG_SOUND0RPT_PT_ADDR)  // =0x400040A

#define REG_SOUND0RPT_LEN_OFFSET 0x40C
#define REG_SOUND0RPT_LEN_ADDR (HW_REG_BASE + REG_SOUND0RPT_LEN_OFFSET)
#define reg_SND_SOUND0RPT_LEN (*(REGType32v *)REG_SOUND0RPT_LEN_ADDR)  // =0x400040C

#define REG_SOUNDCNT_OFFSET 0x500
#define REG_SOUNDCNT_ADDR (HW_REG_BASE + REG_SOUNDCNT_OFFSET)
#define reg_SND_SOUNDCNT (*(REGType16v *)REG_SOUNDCNT_ADDR)  // =0x4000500

#define REG_SOUNDCNT_8_OFFSET 0x501
#define REG_SOUNDCNT_8_ADDR (HW_REG_BASE + REG_SOUNDCNT_8_OFFSET)
#define reg_SND_SOUNDCNT_8 (*(REGType8v *)REG_SOUNDCNT_8_ADDR)  // =0x4000501

#define REG_SOUNDCNT_VOL_OFFSET 0x500
#define REG_SOUNDCNT_VOL_ADDR (HW_REG_BASE + REG_SOUNDCNT_VOL_OFFSET)
#define reg_SND_SOUNDCNT_VOL (*(REGType8v *)REG_SOUNDCNT_VOL_ADDR)  // =0x4000500

#define REG_SNDCAPCNT_OFFSET 0x508
#define REG_SNDCAPCNT_ADDR (HW_REG_BASE + REG_SNDCAPCNT_OFFSET)
#define reg_SND_SNDCAPCNT (*(REGType16v *)REG_SNDCAPCNT_ADDR)  // =0x4000508

#define REG_SNDCAP0CNT_OFFSET 0x508
#define REG_SNDCAP0CNT_ADDR (HW_REG_BASE + REG_SNDCAP0CNT_OFFSET)
#define reg_SND_SNDCAP0CNT (*(REGType8v *)REG_SNDCAP0CNT_ADDR)  // =0x4000508

#define REG_SNDCAP1CNT_OFFSET 0x509
#define REG_SNDCAP1CNT_ADDR (HW_REG_BASE + REG_SNDCAP1CNT_OFFSET)
#define reg_SND_SNDCAP1CNT (*(REGType8v *)REG_SNDCAP1CNT_ADDR)  // =0x4000509

#define REG_SNDCAP0DAD_OFFSET 0x510
#define REG_SNDCAP0DAD_ADDR (HW_REG_BASE + REG_SNDCAP0DAD_OFFSET)
#define reg_SND_SNDCAP0DAD (*(REGType32v *)REG_SNDCAP0DAD_ADDR)  // =0x4000510

#define REG_SNDCAP0LEN_OFFSET 0x514
#define REG_SNDCAP0LEN_ADDR (HW_REG_BASE + REG_SNDCAP0LEN_OFFSET)
#define reg_SND_SNDCAP0LEN (*(REGType16v *)REG_SNDCAP0LEN_ADDR)  // =0x4000514

#define REG_SNDCAP1DAD_OFFSET 0x518
#define REG_SNDCAP1DAD_ADDR (HW_REG_BASE + REG_SNDCAP1DAD_OFFSET)
#define reg_SND_SNDCAP1DAD (*(REGType32v *)REG_SNDCAP1DAD_ADDR)  // =0x4000518

#define REG_SNDCAP1LEN_OFFSET 0x51C
#define REG_SNDCAP1LEN_ADDR (HW_REG_BASE + REG_SNDCAP1LEN_OFFSET)
#define reg_SND_SNDCAP1LEN (*(REGType16v *)REG_SNDCAP1LEN_ADDR)  // =0x400051C




#define REG_GX_VCOUNT_VCOUNTER_SHIFT 0
#define REG_GX_VCOUNT_VCOUNTER_SIZE 10
#define REG_GX_VCOUNT_VCOUNTER_MASK 0x3FF

#ifndef SDK_ASM
#define REG_GX_VCOUNT_FIELD( vcounter ) \
    (u16)( \
    ((u16)((vcounter) << REG_GX_VCOUNT_VCOUNTER_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA0SAD_DMASRC_SHIFT 0
#define REG_MI_DMA0SAD_DMASRC_SIZE 27
#define REG_MI_DMA0SAD_DMASRC_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_MI_DMA0SAD_FIELD( dmasrc ) \
    (u32)( \
    ((u32)((dmasrc) << REG_MI_DMA0SAD_DMASRC_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA0DAD_DMADEST_SHIFT 0
#define REG_MI_DMA0DAD_DMADEST_SIZE 27
#define REG_MI_DMA0DAD_DMADEST_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_MI_DMA0DAD_FIELD( dmadest ) \
    (u32)( \
    ((u32)((dmadest) << REG_MI_DMA0DAD_DMADEST_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA0CNT_E_SHIFT 31
#define REG_MI_DMA0CNT_E_SIZE 1
#define REG_MI_DMA0CNT_E_MASK 0x80000000

#define REG_MI_DMA0CNT_I_SHIFT 30
#define REG_MI_DMA0CNT_I_SIZE 1
#define REG_MI_DMA0CNT_I_MASK 0x40000000

#define REG_MI_DMA0CNT_TIMING_SHIFT 28
#define REG_MI_DMA0CNT_TIMING_SIZE 2
#define REG_MI_DMA0CNT_TIMING_MASK 0x30000000

#define REG_MI_DMA0CNT_SB_SHIFT 26
#define REG_MI_DMA0CNT_SB_SIZE 1
#define REG_MI_DMA0CNT_SB_MASK 0x4000000

#define REG_MI_DMA0CNT_CM_SHIFT 25
#define REG_MI_DMA0CNT_CM_SIZE 1
#define REG_MI_DMA0CNT_CM_MASK 0x2000000

#define REG_MI_DMA0CNT_SAR_SHIFT 23
#define REG_MI_DMA0CNT_SAR_SIZE 2
#define REG_MI_DMA0CNT_SAR_MASK 0x1800000

#define REG_MI_DMA0CNT_DAR_SHIFT 21
#define REG_MI_DMA0CNT_DAR_SIZE 2
#define REG_MI_DMA0CNT_DAR_MASK 0x600000

#define REG_MI_DMA0CNT_WORDCNT_SHIFT 0
#define REG_MI_DMA0CNT_WORDCNT_SIZE 16
#define REG_MI_DMA0CNT_WORDCNT_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_MI_DMA0CNT_FIELD( e, i, timing, sb, cm, sar, dar, wordcnt ) \
    (u32)( \
    ((u32)((e) << REG_MI_DMA0CNT_E_SHIFT)) | \
    ((u32)((i) << REG_MI_DMA0CNT_I_SHIFT)) | \
    ((u32)((timing) << REG_MI_DMA0CNT_TIMING_SHIFT)) | \
    ((u32)((sb) << REG_MI_DMA0CNT_SB_SHIFT)) | \
    ((u32)((cm) << REG_MI_DMA0CNT_CM_SHIFT)) | \
    ((u32)((sar) << REG_MI_DMA0CNT_SAR_SHIFT)) | \
    ((u32)((dar) << REG_MI_DMA0CNT_DAR_SHIFT)) | \
    ((u32)((wordcnt) << REG_MI_DMA0CNT_WORDCNT_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA1DAD_DMADEST_SHIFT 0
#define REG_MI_DMA1DAD_DMADEST_SIZE 27
#define REG_MI_DMA1DAD_DMADEST_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_MI_DMA1DAD_FIELD( dmadest ) \
    (u32)( \
    ((u32)((dmadest) << REG_MI_DMA1DAD_DMADEST_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA1CNT_E_SHIFT 31
#define REG_MI_DMA1CNT_E_SIZE 1
#define REG_MI_DMA1CNT_E_MASK 0x80000000

#define REG_MI_DMA1CNT_I_SHIFT 30
#define REG_MI_DMA1CNT_I_SIZE 1
#define REG_MI_DMA1CNT_I_MASK 0x40000000

#define REG_MI_DMA1CNT_TIMING_SHIFT 28
#define REG_MI_DMA1CNT_TIMING_SIZE 2
#define REG_MI_DMA1CNT_TIMING_MASK 0x30000000

#define REG_MI_DMA1CNT_SB_SHIFT 26
#define REG_MI_DMA1CNT_SB_SIZE 1
#define REG_MI_DMA1CNT_SB_MASK 0x4000000

#define REG_MI_DMA1CNT_CM_SHIFT 25
#define REG_MI_DMA1CNT_CM_SIZE 1
#define REG_MI_DMA1CNT_CM_MASK 0x2000000

#define REG_MI_DMA1CNT_SAR_SHIFT 23
#define REG_MI_DMA1CNT_SAR_SIZE 2
#define REG_MI_DMA1CNT_SAR_MASK 0x1800000

#define REG_MI_DMA1CNT_DAR_SHIFT 21
#define REG_MI_DMA1CNT_DAR_SIZE 2
#define REG_MI_DMA1CNT_DAR_MASK 0x600000

#define REG_MI_DMA1CNT_WORDCNT_SHIFT 0
#define REG_MI_DMA1CNT_WORDCNT_SIZE 16
#define REG_MI_DMA1CNT_WORDCNT_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_MI_DMA1CNT_FIELD( e, i, timing, sb, cm, sar, dar, wordcnt ) \
    (u32)( \
    ((u32)((e) << REG_MI_DMA1CNT_E_SHIFT)) | \
    ((u32)((i) << REG_MI_DMA1CNT_I_SHIFT)) | \
    ((u32)((timing) << REG_MI_DMA1CNT_TIMING_SHIFT)) | \
    ((u32)((sb) << REG_MI_DMA1CNT_SB_SHIFT)) | \
    ((u32)((cm) << REG_MI_DMA1CNT_CM_SHIFT)) | \
    ((u32)((sar) << REG_MI_DMA1CNT_SAR_SHIFT)) | \
    ((u32)((dar) << REG_MI_DMA1CNT_DAR_SHIFT)) | \
    ((u32)((wordcnt) << REG_MI_DMA1CNT_WORDCNT_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA2DAD_DMADEST_SHIFT 0
#define REG_MI_DMA2DAD_DMADEST_SIZE 27
#define REG_MI_DMA2DAD_DMADEST_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_MI_DMA2DAD_FIELD( dmadest ) \
    (u32)( \
    ((u32)((dmadest) << REG_MI_DMA2DAD_DMADEST_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA2CNT_E_SHIFT 31
#define REG_MI_DMA2CNT_E_SIZE 1
#define REG_MI_DMA2CNT_E_MASK 0x80000000

#define REG_MI_DMA2CNT_I_SHIFT 30
#define REG_MI_DMA2CNT_I_SIZE 1
#define REG_MI_DMA2CNT_I_MASK 0x40000000

#define REG_MI_DMA2CNT_TIMING_SHIFT 28
#define REG_MI_DMA2CNT_TIMING_SIZE 2
#define REG_MI_DMA2CNT_TIMING_MASK 0x30000000

#define REG_MI_DMA2CNT_SB_SHIFT 26
#define REG_MI_DMA2CNT_SB_SIZE 1
#define REG_MI_DMA2CNT_SB_MASK 0x4000000

#define REG_MI_DMA2CNT_CM_SHIFT 25
#define REG_MI_DMA2CNT_CM_SIZE 1
#define REG_MI_DMA2CNT_CM_MASK 0x2000000

#define REG_MI_DMA2CNT_SAR_SHIFT 23
#define REG_MI_DMA2CNT_SAR_SIZE 2
#define REG_MI_DMA2CNT_SAR_MASK 0x1800000

#define REG_MI_DMA2CNT_DAR_SHIFT 21
#define REG_MI_DMA2CNT_DAR_SIZE 2
#define REG_MI_DMA2CNT_DAR_MASK 0x600000

#define REG_MI_DMA2CNT_WORDCNT_SHIFT 0
#define REG_MI_DMA2CNT_WORDCNT_SIZE 16
#define REG_MI_DMA2CNT_WORDCNT_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_MI_DMA2CNT_FIELD( e, i, timing, sb, cm, sar, dar, wordcnt ) \
    (u32)( \
    ((u32)((e) << REG_MI_DMA2CNT_E_SHIFT)) | \
    ((u32)((i) << REG_MI_DMA2CNT_I_SHIFT)) | \
    ((u32)((timing) << REG_MI_DMA2CNT_TIMING_SHIFT)) | \
    ((u32)((sb) << REG_MI_DMA2CNT_SB_SHIFT)) | \
    ((u32)((cm) << REG_MI_DMA2CNT_CM_SHIFT)) | \
    ((u32)((sar) << REG_MI_DMA2CNT_SAR_SHIFT)) | \
    ((u32)((dar) << REG_MI_DMA2CNT_DAR_SHIFT)) | \
    ((u32)((wordcnt) << REG_MI_DMA2CNT_WORDCNT_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_DMA3CNT_E_SHIFT 31
#define REG_MI_DMA3CNT_E_SIZE 1
#define REG_MI_DMA3CNT_E_MASK 0x80000000

#define REG_MI_DMA3CNT_I_SHIFT 30
#define REG_MI_DMA3CNT_I_SIZE 1
#define REG_MI_DMA3CNT_I_MASK 0x40000000

#define REG_MI_DMA3CNT_TIMING_SHIFT 28
#define REG_MI_DMA3CNT_TIMING_SIZE 2
#define REG_MI_DMA3CNT_TIMING_MASK 0x30000000

#define REG_MI_DMA3CNT_SB_SHIFT 26
#define REG_MI_DMA3CNT_SB_SIZE 1
#define REG_MI_DMA3CNT_SB_MASK 0x4000000

#define REG_MI_DMA3CNT_CM_SHIFT 25
#define REG_MI_DMA3CNT_CM_SIZE 1
#define REG_MI_DMA3CNT_CM_MASK 0x2000000

#define REG_MI_DMA3CNT_SAR_SHIFT 23
#define REG_MI_DMA3CNT_SAR_SIZE 2
#define REG_MI_DMA3CNT_SAR_MASK 0x1800000

#define REG_MI_DMA3CNT_DAR_SHIFT 21
#define REG_MI_DMA3CNT_DAR_SIZE 2
#define REG_MI_DMA3CNT_DAR_MASK 0x600000

#define REG_MI_DMA3CNT_WORDCNT_SHIFT 0
#define REG_MI_DMA3CNT_WORDCNT_SIZE 16
#define REG_MI_DMA3CNT_WORDCNT_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_MI_DMA3CNT_FIELD( e, i, timing, sb, cm, sar, dar, wordcnt ) \
    (u32)( \
    ((u32)((e) << REG_MI_DMA3CNT_E_SHIFT)) | \
    ((u32)((i) << REG_MI_DMA3CNT_I_SHIFT)) | \
    ((u32)((timing) << REG_MI_DMA3CNT_TIMING_SHIFT)) | \
    ((u32)((sb) << REG_MI_DMA3CNT_SB_SHIFT)) | \
    ((u32)((cm) << REG_MI_DMA3CNT_CM_SHIFT)) | \
    ((u32)((sar) << REG_MI_DMA3CNT_SAR_SHIFT)) | \
    ((u32)((dar) << REG_MI_DMA3CNT_DAR_SHIFT)) | \
    ((u32)((wordcnt) << REG_MI_DMA3CNT_WORDCNT_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOMULTI0_DATA_SHIFT 0
#define REG_EXI_SIOMULTI0_DATA_SIZE 16
#define REG_EXI_SIOMULTI0_DATA_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_EXI_SIOMULTI0_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIOMULTI0_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOMULTI1_DATA_SHIFT 0
#define REG_EXI_SIOMULTI1_DATA_SIZE 16
#define REG_EXI_SIOMULTI1_DATA_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_EXI_SIOMULTI1_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIOMULTI1_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOMULTI2_DATA_SHIFT 0
#define REG_EXI_SIOMULTI2_DATA_SIZE 16
#define REG_EXI_SIOMULTI2_DATA_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_EXI_SIOMULTI2_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIOMULTI2_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOMULTI3_DATA_SHIFT 0
#define REG_EXI_SIOMULTI3_DATA_SIZE 16
#define REG_EXI_SIOMULTI3_DATA_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_EXI_SIOMULTI3_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIOMULTI3_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOCNT_CKUP_SHIFT 15
#define REG_EXI_SIOCNT_CKUP_SIZE 1
#define REG_EXI_SIOCNT_CKUP_MASK 0x8000

#define REG_EXI_SIOCNT_I_SHIFT 14
#define REG_EXI_SIOCNT_I_SIZE 1
#define REG_EXI_SIOCNT_I_MASK 0x4000

#define REG_EXI_SIOCNT_MD1_SHIFT 13
#define REG_EXI_SIOCNT_MD1_SIZE 1
#define REG_EXI_SIOCNT_MD1_MASK 0x2000

#define REG_EXI_SIOCNT_BITLEN_SHIFT 12
#define REG_EXI_SIOCNT_BITLEN_SIZE 1
#define REG_EXI_SIOCNT_BITLEN_MASK 0x1000

#define REG_EXI_SIOCNT_START_SHIFT 7
#define REG_EXI_SIOCNT_START_SIZE 1
#define REG_EXI_SIOCNT_START_MASK 0x80

#define REG_EXI_SIOCNT_TSEND_SHIFT 3
#define REG_EXI_SIOCNT_TSEND_SIZE 1
#define REG_EXI_SIOCNT_TSEND_MASK 0x8

#define REG_EXI_SIOCNT_TRECV_SHIFT 2
#define REG_EXI_SIOCNT_TRECV_SIZE 1
#define REG_EXI_SIOCNT_TRECV_MASK 0x4

#define REG_EXI_SIOCNT_SCLOCKHZ_SHIFT 1
#define REG_EXI_SIOCNT_SCLOCKHZ_SIZE 1
#define REG_EXI_SIOCNT_SCLOCKHZ_MASK 0x2

#define REG_EXI_SIOCNT_SCLOCK_SHIFT 0
#define REG_EXI_SIOCNT_SCLOCK_SIZE 1
#define REG_EXI_SIOCNT_SCLOCK_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_SIOCNT_FIELD( ckup, i, md1, bitlen, start, tsend, trecv, sclockhz, sclock ) \
    (u16)( \
    ((u16)((ckup) << REG_EXI_SIOCNT_CKUP_SHIFT)) | \
    ((u16)((i) << REG_EXI_SIOCNT_I_SHIFT)) | \
    ((u16)((md1) << REG_EXI_SIOCNT_MD1_SHIFT)) | \
    ((u16)((bitlen) << REG_EXI_SIOCNT_BITLEN_SHIFT)) | \
    ((u16)((start) << REG_EXI_SIOCNT_START_SHIFT)) | \
    ((u16)((tsend) << REG_EXI_SIOCNT_TSEND_SHIFT)) | \
    ((u16)((trecv) << REG_EXI_SIOCNT_TRECV_SHIFT)) | \
    ((u16)((sclockhz) << REG_EXI_SIOCNT_SCLOCKHZ_SHIFT)) | \
    ((u16)((sclock) << REG_EXI_SIOCNT_SCLOCK_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOCNT_MULTI_CKUP_SHIFT 15
#define REG_EXI_SIOCNT_MULTI_CKUP_SIZE 1
#define REG_EXI_SIOCNT_MULTI_CKUP_MASK 0x8000

#define REG_EXI_SIOCNT_MULTI_I_SHIFT 14
#define REG_EXI_SIOCNT_MULTI_I_SIZE 1
#define REG_EXI_SIOCNT_MULTI_I_MASK 0x4000

#define REG_EXI_SIOCNT_MULTI_MD1_SHIFT 13
#define REG_EXI_SIOCNT_MULTI_MD1_SIZE 1
#define REG_EXI_SIOCNT_MULTI_MD1_MASK 0x2000

#define REG_EXI_SIOCNT_MULTI_MD0_SHIFT 12
#define REG_EXI_SIOCNT_MULTI_MD0_SIZE 1
#define REG_EXI_SIOCNT_MULTI_MD0_MASK 0x1000

#define REG_EXI_SIOCNT_MULTI_START_SHIFT 7
#define REG_EXI_SIOCNT_MULTI_START_SIZE 1
#define REG_EXI_SIOCNT_MULTI_START_MASK 0x80

#define REG_EXI_SIOCNT_MULTI_ERROR_SHIFT 6
#define REG_EXI_SIOCNT_MULTI_ERROR_SIZE 1
#define REG_EXI_SIOCNT_MULTI_ERROR_MASK 0x40

#define REG_EXI_SIOCNT_MULTI_MULTIID_SHIFT 4
#define REG_EXI_SIOCNT_MULTI_MULTIID_SIZE 2
#define REG_EXI_SIOCNT_MULTI_MULTIID_MASK 0x30

#define REG_EXI_SIOCNT_MULTI_SDMON_SHIFT 3
#define REG_EXI_SIOCNT_MULTI_SDMON_SIZE 1
#define REG_EXI_SIOCNT_MULTI_SDMON_MASK 0x8

#define REG_EXI_SIOCNT_MULTI_SIMON_SHIFT 2
#define REG_EXI_SIOCNT_MULTI_SIMON_SIZE 1
#define REG_EXI_SIOCNT_MULTI_SIMON_MASK 0x4

#define REG_EXI_SIOCNT_MULTI_BAUD_SHIFT 0
#define REG_EXI_SIOCNT_MULTI_BAUD_SIZE 2
#define REG_EXI_SIOCNT_MULTI_BAUD_MASK 0x3

#ifndef SDK_ASM
#define REG_EXI_SIOCNT_MULTI_FIELD( ckup, i, md1, md0, start, error, multiid, sdmon, simon, baud ) \
    (u16)( \
    ((u16)((ckup) << REG_EXI_SIOCNT_MULTI_CKUP_SHIFT)) | \
    ((u16)((i) << REG_EXI_SIOCNT_MULTI_I_SHIFT)) | \
    ((u16)((md1) << REG_EXI_SIOCNT_MULTI_MD1_SHIFT)) | \
    ((u16)((md0) << REG_EXI_SIOCNT_MULTI_MD0_SHIFT)) | \
    ((u16)((start) << REG_EXI_SIOCNT_MULTI_START_SHIFT)) | \
    ((u16)((error) << REG_EXI_SIOCNT_MULTI_ERROR_SHIFT)) | \
    ((u16)((multiid) << REG_EXI_SIOCNT_MULTI_MULTIID_SHIFT)) | \
    ((u16)((sdmon) << REG_EXI_SIOCNT_MULTI_SDMON_SHIFT)) | \
    ((u16)((simon) << REG_EXI_SIOCNT_MULTI_SIMON_SHIFT)) | \
    ((u16)((baud) << REG_EXI_SIOCNT_MULTI_BAUD_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOCNT_UART_CKUP_SHIFT 15
#define REG_EXI_SIOCNT_UART_CKUP_SIZE 1
#define REG_EXI_SIOCNT_UART_CKUP_MASK 0x8000

#define REG_EXI_SIOCNT_UART_MD1_SHIFT 13
#define REG_EXI_SIOCNT_UART_MD1_SIZE 1
#define REG_EXI_SIOCNT_UART_MD1_MASK 0x2000

#define REG_EXI_SIOCNT_UART_MD0_SHIFT 12
#define REG_EXI_SIOCNT_UART_MD0_SIZE 1
#define REG_EXI_SIOCNT_UART_MD0_MASK 0x1000

#define REG_EXI_SIOCNT_UART_RECVEF_SHIFT 11
#define REG_EXI_SIOCNT_UART_RECVEF_SIZE 1
#define REG_EXI_SIOCNT_UART_RECVEF_MASK 0x800

#define REG_EXI_SIOCNT_UART_SENDEF_SHIFT 10
#define REG_EXI_SIOCNT_UART_SENDEF_SIZE 1
#define REG_EXI_SIOCNT_UART_SENDEF_MASK 0x400

#define REG_EXI_SIOCNT_UART_PARITYEF_SHIFT 9
#define REG_EXI_SIOCNT_UART_PARITYEF_SIZE 1
#define REG_EXI_SIOCNT_UART_PARITYEF_MASK 0x200

#define REG_EXI_SIOCNT_UART_FIFOEF_SHIFT 8
#define REG_EXI_SIOCNT_UART_FIFOEF_SIZE 1
#define REG_EXI_SIOCNT_UART_FIFOEF_MASK 0x100

#define REG_EXI_SIOCNT_UART_DATALEN_SHIFT 7
#define REG_EXI_SIOCNT_UART_DATALEN_SIZE 1
#define REG_EXI_SIOCNT_UART_DATALEN_MASK 0x80

#define REG_EXI_SIOCNT_UART_ERROR_SHIFT 6
#define REG_EXI_SIOCNT_UART_ERROR_SIZE 1
#define REG_EXI_SIOCNT_UART_ERROR_MASK 0x40

#define REG_EXI_SIOCNT_UART_RECV_SHIFT 5
#define REG_EXI_SIOCNT_UART_RECV_SIZE 1
#define REG_EXI_SIOCNT_UART_RECV_MASK 0x20

#define REG_EXI_SIOCNT_UART_SEND_SHIFT 4
#define REG_EXI_SIOCNT_UART_SEND_SIZE 1
#define REG_EXI_SIOCNT_UART_SEND_MASK 0x10

#define REG_EXI_SIOCNT_UART_PARITYCNT_SHIFT 3
#define REG_EXI_SIOCNT_UART_PARITYCNT_SIZE 1
#define REG_EXI_SIOCNT_UART_PARITYCNT_MASK 0x8

#define REG_EXI_SIOCNT_UART_CTS_SHIFT 2
#define REG_EXI_SIOCNT_UART_CTS_SIZE 1
#define REG_EXI_SIOCNT_UART_CTS_MASK 0x4

#define REG_EXI_SIOCNT_UART_BAUD_SHIFT 0
#define REG_EXI_SIOCNT_UART_BAUD_SIZE 2
#define REG_EXI_SIOCNT_UART_BAUD_MASK 0x3

#ifndef SDK_ASM
#define REG_EXI_SIOCNT_UART_FIELD( ckup, md1, md0, recvef, sendef, parityef, fifoef, datalen, error, recv, send, paritycnt, cts, baud ) \
    (u16)( \
    ((u16)((ckup) << REG_EXI_SIOCNT_UART_CKUP_SHIFT)) | \
    ((u16)((md1) << REG_EXI_SIOCNT_UART_MD1_SHIFT)) | \
    ((u16)((md0) << REG_EXI_SIOCNT_UART_MD0_SHIFT)) | \
    ((u16)((recvef) << REG_EXI_SIOCNT_UART_RECVEF_SHIFT)) | \
    ((u16)((sendef) << REG_EXI_SIOCNT_UART_SENDEF_SHIFT)) | \
    ((u16)((parityef) << REG_EXI_SIOCNT_UART_PARITYEF_SHIFT)) | \
    ((u16)((fifoef) << REG_EXI_SIOCNT_UART_FIFOEF_SHIFT)) | \
    ((u16)((datalen) << REG_EXI_SIOCNT_UART_DATALEN_SHIFT)) | \
    ((u16)((error) << REG_EXI_SIOCNT_UART_ERROR_SHIFT)) | \
    ((u16)((recv) << REG_EXI_SIOCNT_UART_RECV_SHIFT)) | \
    ((u16)((send) << REG_EXI_SIOCNT_UART_SEND_SHIFT)) | \
    ((u16)((paritycnt) << REG_EXI_SIOCNT_UART_PARITYCNT_SHIFT)) | \
    ((u16)((cts) << REG_EXI_SIOCNT_UART_CTS_SHIFT)) | \
    ((u16)((baud) << REG_EXI_SIOCNT_UART_BAUD_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOCNT_H_RFFUL_SHIFT 15
#define REG_EXI_SIOCNT_H_RFFUL_SIZE 1
#define REG_EXI_SIOCNT_H_RFFUL_MASK 0x8000

#define REG_EXI_SIOCNT_H_TFEMP_SHIFT 14
#define REG_EXI_SIOCNT_H_TFEMP_SIZE 1
#define REG_EXI_SIOCNT_H_TFEMP_MASK 0x4000

#ifndef SDK_ASM
#define REG_EXI_SIOCNT_H_FIELD( rfful, tfemp ) \
    (u16)( \
    ((u16)((rfful) << REG_EXI_SIOCNT_H_RFFUL_SHIFT)) | \
    ((u16)((tfemp) << REG_EXI_SIOCNT_H_TFEMP_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIOMLT_SEND_DATA_SHIFT 0
#define REG_EXI_SIOMLT_SEND_DATA_SIZE 16
#define REG_EXI_SIOMLT_SEND_DATA_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_EXI_SIOMLT_SEND_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIOMLT_SEND_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_SIODATA8_DATA_SHIFT 0
#define REG_EXI_SIODATA8_DATA_SIZE 8
#define REG_EXI_SIODATA8_DATA_MASK 0xFF

#ifndef SDK_ASM
#define REG_EXI_SIODATA8_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_EXI_SIODATA8_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_PAD_KEYINPUT_L_SHIFT 9
#define REG_PAD_KEYINPUT_L_SIZE 1
#define REG_PAD_KEYINPUT_L_MASK 0x200

#define REG_PAD_KEYINPUT_R_SHIFT 8
#define REG_PAD_KEYINPUT_R_SIZE 1
#define REG_PAD_KEYINPUT_R_MASK 0x100

#define REG_PAD_KEYINPUT_DOWN_SHIFT 7
#define REG_PAD_KEYINPUT_DOWN_SIZE 1
#define REG_PAD_KEYINPUT_DOWN_MASK 0x80

#define REG_PAD_KEYINPUT_UP_SHIFT 6
#define REG_PAD_KEYINPUT_UP_SIZE 1
#define REG_PAD_KEYINPUT_UP_MASK 0x40

#define REG_PAD_KEYINPUT_LEFT_SHIFT 5
#define REG_PAD_KEYINPUT_LEFT_SIZE 1
#define REG_PAD_KEYINPUT_LEFT_MASK 0x20

#define REG_PAD_KEYINPUT_RIGHT_SHIFT 4
#define REG_PAD_KEYINPUT_RIGHT_SIZE 1
#define REG_PAD_KEYINPUT_RIGHT_MASK 0x10

#define REG_PAD_KEYINPUT_START_SHIFT 3
#define REG_PAD_KEYINPUT_START_SIZE 1
#define REG_PAD_KEYINPUT_START_MASK 0x8

#define REG_PAD_KEYINPUT_SEL_SHIFT 2
#define REG_PAD_KEYINPUT_SEL_SIZE 1
#define REG_PAD_KEYINPUT_SEL_MASK 0x4

#define REG_PAD_KEYINPUT_B_SHIFT 1
#define REG_PAD_KEYINPUT_B_SIZE 1
#define REG_PAD_KEYINPUT_B_MASK 0x2

#define REG_PAD_KEYINPUT_A_SHIFT 0
#define REG_PAD_KEYINPUT_A_SIZE 1
#define REG_PAD_KEYINPUT_A_MASK 0x1

#ifndef SDK_ASM
#define REG_PAD_KEYINPUT_FIELD( l, r, down, up, left, right, start, sel, b, a ) \
    (u16)( \
    ((u16)((l) << REG_PAD_KEYINPUT_L_SHIFT)) | \
    ((u16)((r) << REG_PAD_KEYINPUT_R_SHIFT)) | \
    ((u16)((down) << REG_PAD_KEYINPUT_DOWN_SHIFT)) | \
    ((u16)((up) << REG_PAD_KEYINPUT_UP_SHIFT)) | \
    ((u16)((left) << REG_PAD_KEYINPUT_LEFT_SHIFT)) | \
    ((u16)((right) << REG_PAD_KEYINPUT_RIGHT_SHIFT)) | \
    ((u16)((start) << REG_PAD_KEYINPUT_START_SHIFT)) | \
    ((u16)((sel) << REG_PAD_KEYINPUT_SEL_SHIFT)) | \
    ((u16)((b) << REG_PAD_KEYINPUT_B_SHIFT)) | \
    ((u16)((a) << REG_PAD_KEYINPUT_A_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_RCNT0_L_RE1_SHIFT 15
#define REG_EXI_RCNT0_L_RE1_SIZE 1
#define REG_EXI_RCNT0_L_RE1_MASK 0x8000

#define REG_EXI_RCNT0_L_RE0_SHIFT 14
#define REG_EXI_RCNT0_L_RE0_SIZE 1
#define REG_EXI_RCNT0_L_RE0_MASK 0x4000

#define REG_EXI_RCNT0_L_I_SHIFT 8
#define REG_EXI_RCNT0_L_I_SIZE 1
#define REG_EXI_RCNT0_L_I_MASK 0x100

#define REG_EXI_RCNT0_L_DIR_SO_SHIFT 7
#define REG_EXI_RCNT0_L_DIR_SO_SIZE 1
#define REG_EXI_RCNT0_L_DIR_SO_MASK 0x80

#define REG_EXI_RCNT0_L_DIR_SI_SHIFT 6
#define REG_EXI_RCNT0_L_DIR_SI_SIZE 1
#define REG_EXI_RCNT0_L_DIR_SI_MASK 0x40

#define REG_EXI_RCNT0_L_DIR_SD_SHIFT 5
#define REG_EXI_RCNT0_L_DIR_SD_SIZE 1
#define REG_EXI_RCNT0_L_DIR_SD_MASK 0x20

#define REG_EXI_RCNT0_L_DIR_SC_SHIFT 4
#define REG_EXI_RCNT0_L_DIR_SC_SIZE 1
#define REG_EXI_RCNT0_L_DIR_SC_MASK 0x10

#define REG_EXI_RCNT0_L_DATA_SO_SHIFT 3
#define REG_EXI_RCNT0_L_DATA_SO_SIZE 1
#define REG_EXI_RCNT0_L_DATA_SO_MASK 0x8

#define REG_EXI_RCNT0_L_DATA_SI_SHIFT 2
#define REG_EXI_RCNT0_L_DATA_SI_SIZE 1
#define REG_EXI_RCNT0_L_DATA_SI_MASK 0x4

#define REG_EXI_RCNT0_L_DATA_SD_SHIFT 1
#define REG_EXI_RCNT0_L_DATA_SD_SIZE 1
#define REG_EXI_RCNT0_L_DATA_SD_MASK 0x2

#define REG_EXI_RCNT0_L_DATA_SC_SHIFT 0
#define REG_EXI_RCNT0_L_DATA_SC_SIZE 1
#define REG_EXI_RCNT0_L_DATA_SC_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_RCNT0_L_FIELD( re1, re0, i, dir_so, dir_si, dir_sd, dir_sc, data_so, data_si, data_sd, data_sc ) \
    (u16)( \
    ((u16)((re1) << REG_EXI_RCNT0_L_RE1_SHIFT)) | \
    ((u16)((re0) << REG_EXI_RCNT0_L_RE0_SHIFT)) | \
    ((u16)((i) << REG_EXI_RCNT0_L_I_SHIFT)) | \
    ((u16)((dir_so) << REG_EXI_RCNT0_L_DIR_SO_SHIFT)) | \
    ((u16)((dir_si) << REG_EXI_RCNT0_L_DIR_SI_SHIFT)) | \
    ((u16)((dir_sd) << REG_EXI_RCNT0_L_DIR_SD_SHIFT)) | \
    ((u16)((dir_sc) << REG_EXI_RCNT0_L_DIR_SC_SHIFT)) | \
    ((u16)((data_so) << REG_EXI_RCNT0_L_DATA_SO_SHIFT)) | \
    ((u16)((data_si) << REG_EXI_RCNT0_L_DATA_SI_SHIFT)) | \
    ((u16)((data_sd) << REG_EXI_RCNT0_L_DATA_SD_SHIFT)) | \
    ((u16)((data_sc) << REG_EXI_RCNT0_L_DATA_SC_SHIFT)) )
#endif //SDK_ASM
#if !defined(SDK_TS)

#define REG_EXI_RCNT0_H_DIR_R7_SHIFT 15
#define REG_EXI_RCNT0_H_DIR_R7_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R7_MASK 0x8000

#define REG_EXI_RCNT0_H_DIR_R6_SHIFT 14
#define REG_EXI_RCNT0_H_DIR_R6_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R6_MASK 0x4000

#define REG_EXI_RCNT0_H_DIR_R5_SHIFT 13
#define REG_EXI_RCNT0_H_DIR_R5_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R5_MASK 0x2000

#define REG_EXI_RCNT0_H_DIR_R4_SHIFT 12
#define REG_EXI_RCNT0_H_DIR_R4_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R4_MASK 0x1000

#define REG_EXI_RCNT0_H_DIR_R3_SHIFT 11
#define REG_EXI_RCNT0_H_DIR_R3_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R3_MASK 0x800

#define REG_EXI_RCNT0_H_DIR_R2_SHIFT 10
#define REG_EXI_RCNT0_H_DIR_R2_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R2_MASK 0x400

#define REG_EXI_RCNT0_H_DIR_R1_SHIFT 9
#define REG_EXI_RCNT0_H_DIR_R1_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R1_MASK 0x200

#define REG_EXI_RCNT0_H_DIR_R0_SHIFT 8
#define REG_EXI_RCNT0_H_DIR_R0_SIZE 1
#define REG_EXI_RCNT0_H_DIR_R0_MASK 0x100

#define REG_EXI_RCNT0_H_DATA_R7_SHIFT 7
#define REG_EXI_RCNT0_H_DATA_R7_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R7_MASK 0x80

#define REG_EXI_RCNT0_H_DATA_R6_SHIFT 6
#define REG_EXI_RCNT0_H_DATA_R6_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R6_MASK 0x40

#define REG_EXI_RCNT0_H_DATA_R5_SHIFT 5
#define REG_EXI_RCNT0_H_DATA_R5_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R5_MASK 0x20

#define REG_EXI_RCNT0_H_DATA_R4_SHIFT 4
#define REG_EXI_RCNT0_H_DATA_R4_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R4_MASK 0x10

#define REG_EXI_RCNT0_H_DATA_R3_SHIFT 3
#define REG_EXI_RCNT0_H_DATA_R3_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R3_MASK 0x8

#define REG_EXI_RCNT0_H_DATA_R2_SHIFT 2
#define REG_EXI_RCNT0_H_DATA_R2_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R2_MASK 0x4

#define REG_EXI_RCNT0_H_DATA_R1_SHIFT 1
#define REG_EXI_RCNT0_H_DATA_R1_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R1_MASK 0x2

#define REG_EXI_RCNT0_H_DATA_R0_SHIFT 0
#define REG_EXI_RCNT0_H_DATA_R0_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R0_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_RCNT0_H_FIELD( dir_r7, dir_r6, dir_r5, dir_r4, dir_r3, dir_r2, dir_r1, dir_r0, data_r7, data_r6, data_r5, data_r4, data_r3, data_r2, data_r1, data_r0 ) \
    (u16)( \
    ((u16)((dir_r7) << REG_EXI_RCNT0_H_DIR_R7_SHIFT)) | \
    ((u16)((dir_r6) << REG_EXI_RCNT0_H_DIR_R6_SHIFT)) | \
    ((u16)((dir_r5) << REG_EXI_RCNT0_H_DIR_R5_SHIFT)) | \
    ((u16)((dir_r4) << REG_EXI_RCNT0_H_DIR_R4_SHIFT)) | \
    ((u16)((dir_r3) << REG_EXI_RCNT0_H_DIR_R3_SHIFT)) | \
    ((u16)((dir_r2) << REG_EXI_RCNT0_H_DIR_R2_SHIFT)) | \
    ((u16)((dir_r1) << REG_EXI_RCNT0_H_DIR_R1_SHIFT)) | \
    ((u16)((dir_r0) << REG_EXI_RCNT0_H_DIR_R0_SHIFT)) | \
    ((u16)((data_r7) << REG_EXI_RCNT0_H_DATA_R7_SHIFT)) | \
    ((u16)((data_r6) << REG_EXI_RCNT0_H_DATA_R6_SHIFT)) | \
    ((u16)((data_r5) << REG_EXI_RCNT0_H_DATA_R5_SHIFT)) | \
    ((u16)((data_r4) << REG_EXI_RCNT0_H_DATA_R4_SHIFT)) | \
    ((u16)((data_r3) << REG_EXI_RCNT0_H_DATA_R3_SHIFT)) | \
    ((u16)((data_r2) << REG_EXI_RCNT0_H_DATA_R2_SHIFT)) | \
    ((u16)((data_r1) << REG_EXI_RCNT0_H_DATA_R1_SHIFT)) | \
    ((u16)((data_r0) << REG_EXI_RCNT0_H_DATA_R0_SHIFT)) )
#endif //SDK_ASM
#endif //!defined(SDK_TS)
#if defined(SDK_TS)

#define REG_EXI_RCNT0_H_DATA_R7_SHIFT 7
#define REG_EXI_RCNT0_H_DATA_R7_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R7_MASK 0x80

#define REG_EXI_RCNT0_H_DATA_R6_SHIFT 6
#define REG_EXI_RCNT0_H_DATA_R6_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R6_MASK 0x40

#define REG_EXI_RCNT0_H_DATA_R5_SHIFT 5
#define REG_EXI_RCNT0_H_DATA_R5_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R5_MASK 0x20

#define REG_EXI_RCNT0_H_DATA_R4_SHIFT 4
#define REG_EXI_RCNT0_H_DATA_R4_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R4_MASK 0x10

#define REG_EXI_RCNT0_H_DATA_R3_SHIFT 3
#define REG_EXI_RCNT0_H_DATA_R3_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R3_MASK 0x8

#define REG_EXI_RCNT0_H_DATA_R2_SHIFT 2
#define REG_EXI_RCNT0_H_DATA_R2_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R2_MASK 0x4

#define REG_EXI_RCNT0_H_DATA_R1_SHIFT 1
#define REG_EXI_RCNT0_H_DATA_R1_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R1_MASK 0x2

#define REG_EXI_RCNT0_H_DATA_R0_SHIFT 0
#define REG_EXI_RCNT0_H_DATA_R0_SIZE 1
#define REG_EXI_RCNT0_H_DATA_R0_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_RCNT0_H_FIELD( data_r7, data_r6, data_r5, data_r4, data_r3, data_r2, data_r1, data_r0 ) \
    (u16)( \
    ((u16)((data_r7) << REG_EXI_RCNT0_H_DATA_R7_SHIFT)) | \
    ((u16)((data_r6) << REG_EXI_RCNT0_H_DATA_R6_SHIFT)) | \
    ((u16)((data_r5) << REG_EXI_RCNT0_H_DATA_R5_SHIFT)) | \
    ((u16)((data_r4) << REG_EXI_RCNT0_H_DATA_R4_SHIFT)) | \
    ((u16)((data_r3) << REG_EXI_RCNT0_H_DATA_R3_SHIFT)) | \
    ((u16)((data_r2) << REG_EXI_RCNT0_H_DATA_R2_SHIFT)) | \
    ((u16)((data_r1) << REG_EXI_RCNT0_H_DATA_R1_SHIFT)) | \
    ((u16)((data_r0) << REG_EXI_RCNT0_H_DATA_R0_SHIFT)) )
#endif //SDK_ASM
#endif //defined(SDK_TS)
#if !defined(SDK_TS)

#define REG_EXI_RCNT1_DIR_RB_SHIFT 7
#define REG_EXI_RCNT1_DIR_RB_SIZE 1
#define REG_EXI_RCNT1_DIR_RB_MASK 0x80

#define REG_EXI_RCNT1_DIR_RA_SHIFT 6
#define REG_EXI_RCNT1_DIR_RA_SIZE 1
#define REG_EXI_RCNT1_DIR_RA_MASK 0x40

#define REG_EXI_RCNT1_DIR_R9_SHIFT 5
#define REG_EXI_RCNT1_DIR_R9_SIZE 1
#define REG_EXI_RCNT1_DIR_R9_MASK 0x20

#define REG_EXI_RCNT1_DIR_R8_SHIFT 4
#define REG_EXI_RCNT1_DIR_R8_SIZE 1
#define REG_EXI_RCNT1_DIR_R8_MASK 0x10

#define REG_EXI_RCNT1_DATA_RB_SHIFT 3
#define REG_EXI_RCNT1_DATA_RB_SIZE 1
#define REG_EXI_RCNT1_DATA_RB_MASK 0x8

#define REG_EXI_RCNT1_DATA_RA_SHIFT 2
#define REG_EXI_RCNT1_DATA_RA_SIZE 1
#define REG_EXI_RCNT1_DATA_RA_MASK 0x4

#define REG_EXI_RCNT1_DATA_R9_SHIFT 1
#define REG_EXI_RCNT1_DATA_R9_SIZE 1
#define REG_EXI_RCNT1_DATA_R9_MASK 0x2

#define REG_EXI_RCNT1_DATA_R8_SHIFT 0
#define REG_EXI_RCNT1_DATA_R8_SIZE 1
#define REG_EXI_RCNT1_DATA_R8_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_RCNT1_FIELD( dir_rb, dir_ra, dir_r9, dir_r8, data_rb, data_ra, data_r9, data_r8 ) \
    (u16)( \
    ((u16)((dir_rb) << REG_EXI_RCNT1_DIR_RB_SHIFT)) | \
    ((u16)((dir_ra) << REG_EXI_RCNT1_DIR_RA_SHIFT)) | \
    ((u16)((dir_r9) << REG_EXI_RCNT1_DIR_R9_SHIFT)) | \
    ((u16)((dir_r8) << REG_EXI_RCNT1_DIR_R8_SHIFT)) | \
    ((u16)((data_rb) << REG_EXI_RCNT1_DATA_RB_SHIFT)) | \
    ((u16)((data_ra) << REG_EXI_RCNT1_DATA_RA_SHIFT)) | \
    ((u16)((data_r9) << REG_EXI_RCNT1_DATA_R9_SHIFT)) | \
    ((u16)((data_r8) << REG_EXI_RCNT1_DATA_R8_SHIFT)) )
#endif //SDK_ASM
#endif //!defined(SDK_TS)
#if defined(SDK_TS)

#define REG_EXI_RCNT1_DIR_RF_SHIFT 15
#define REG_EXI_RCNT1_DIR_RF_SIZE 1
#define REG_EXI_RCNT1_DIR_RF_MASK 0x8000

#define REG_EXI_RCNT1_DIR_RE_SHIFT 14
#define REG_EXI_RCNT1_DIR_RE_SIZE 1
#define REG_EXI_RCNT1_DIR_RE_MASK 0x4000

#define REG_EXI_RCNT1_DIR_RD_SHIFT 13
#define REG_EXI_RCNT1_DIR_RD_SIZE 1
#define REG_EXI_RCNT1_DIR_RD_MASK 0x2000

#define REG_EXI_RCNT1_DIR_RC_SHIFT 12
#define REG_EXI_RCNT1_DIR_RC_SIZE 1
#define REG_EXI_RCNT1_DIR_RC_MASK 0x1000

#define REG_EXI_RCNT1_DATA_RF_SHIFT 11
#define REG_EXI_RCNT1_DATA_RF_SIZE 1
#define REG_EXI_RCNT1_DATA_RF_MASK 0x800

#define REG_EXI_RCNT1_DATA_RE_SHIFT 10
#define REG_EXI_RCNT1_DATA_RE_SIZE 1
#define REG_EXI_RCNT1_DATA_RE_MASK 0x400

#define REG_EXI_RCNT1_DATA_RD_SHIFT 9
#define REG_EXI_RCNT1_DATA_RD_SIZE 1
#define REG_EXI_RCNT1_DATA_RD_MASK 0x200

#define REG_EXI_RCNT1_DATA_RC_SHIFT 8
#define REG_EXI_RCNT1_DATA_RC_SIZE 1
#define REG_EXI_RCNT1_DATA_RC_MASK 0x100

#define REG_EXI_RCNT1_DIR_RB_SHIFT 7
#define REG_EXI_RCNT1_DIR_RB_SIZE 1
#define REG_EXI_RCNT1_DIR_RB_MASK 0x80

#define REG_EXI_RCNT1_DIR_RA_SHIFT 6
#define REG_EXI_RCNT1_DIR_RA_SIZE 1
#define REG_EXI_RCNT1_DIR_RA_MASK 0x40

#define REG_EXI_RCNT1_DIR_R9_SHIFT 5
#define REG_EXI_RCNT1_DIR_R9_SIZE 1
#define REG_EXI_RCNT1_DIR_R9_MASK 0x20

#define REG_EXI_RCNT1_DIR_R8_SHIFT 4
#define REG_EXI_RCNT1_DIR_R8_SIZE 1
#define REG_EXI_RCNT1_DIR_R8_MASK 0x10

#define REG_EXI_RCNT1_DATA_RB_SHIFT 3
#define REG_EXI_RCNT1_DATA_RB_SIZE 1
#define REG_EXI_RCNT1_DATA_RB_MASK 0x8

#define REG_EXI_RCNT1_DATA_RA_SHIFT 2
#define REG_EXI_RCNT1_DATA_RA_SIZE 1
#define REG_EXI_RCNT1_DATA_RA_MASK 0x4

#define REG_EXI_RCNT1_DATA_R9_SHIFT 1
#define REG_EXI_RCNT1_DATA_R9_SIZE 1
#define REG_EXI_RCNT1_DATA_R9_MASK 0x2

#define REG_EXI_RCNT1_DATA_R8_SHIFT 0
#define REG_EXI_RCNT1_DATA_R8_SIZE 1
#define REG_EXI_RCNT1_DATA_R8_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_RCNT1_FIELD( dir_rf, dir_re, dir_rd, dir_rc, data_rf, data_re, data_rd, data_rc, dir_rb, dir_ra, dir_r9, dir_r8, data_rb, data_ra, data_r9, data_r8 ) \
    (u16)( \
    ((u16)((dir_rf) << REG_EXI_RCNT1_DIR_RF_SHIFT)) | \
    ((u16)((dir_re) << REG_EXI_RCNT1_DIR_RE_SHIFT)) | \
    ((u16)((dir_rd) << REG_EXI_RCNT1_DIR_RD_SHIFT)) | \
    ((u16)((dir_rc) << REG_EXI_RCNT1_DIR_RC_SHIFT)) | \
    ((u16)((data_rf) << REG_EXI_RCNT1_DATA_RF_SHIFT)) | \
    ((u16)((data_re) << REG_EXI_RCNT1_DATA_RE_SHIFT)) | \
    ((u16)((data_rd) << REG_EXI_RCNT1_DATA_RD_SHIFT)) | \
    ((u16)((data_rc) << REG_EXI_RCNT1_DATA_RC_SHIFT)) | \
    ((u16)((dir_rb) << REG_EXI_RCNT1_DIR_RB_SHIFT)) | \
    ((u16)((dir_ra) << REG_EXI_RCNT1_DIR_RA_SHIFT)) | \
    ((u16)((dir_r9) << REG_EXI_RCNT1_DIR_R9_SHIFT)) | \
    ((u16)((dir_r8) << REG_EXI_RCNT1_DIR_R8_SHIFT)) | \
    ((u16)((data_rb) << REG_EXI_RCNT1_DATA_RB_SHIFT)) | \
    ((u16)((data_ra) << REG_EXI_RCNT1_DATA_RA_SHIFT)) | \
    ((u16)((data_r9) << REG_EXI_RCNT1_DATA_R9_SHIFT)) | \
    ((u16)((data_r8) << REG_EXI_RCNT1_DATA_R8_SHIFT)) )
#endif //SDK_ASM
#endif //defined(SDK_TS)

#define REG_EXI_JOYCNT_MOD_SHIFT 7
#define REG_EXI_JOYCNT_MOD_SIZE 1
#define REG_EXI_JOYCNT_MOD_MASK 0x80

#define REG_EXI_JOYCNT_I_SHIFT 6
#define REG_EXI_JOYCNT_I_SIZE 1
#define REG_EXI_JOYCNT_I_MASK 0x40

#define REG_EXI_JOYCNT_SEND_SHIFT 2
#define REG_EXI_JOYCNT_SEND_SIZE 1
#define REG_EXI_JOYCNT_SEND_MASK 0x4

#define REG_EXI_JOYCNT_RECV_SHIFT 1
#define REG_EXI_JOYCNT_RECV_SIZE 1
#define REG_EXI_JOYCNT_RECV_MASK 0x2

#define REG_EXI_JOYCNT_RESET_SHIFT 0
#define REG_EXI_JOYCNT_RESET_SIZE 1
#define REG_EXI_JOYCNT_RESET_MASK 0x1

#ifndef SDK_ASM
#define REG_EXI_JOYCNT_FIELD( mod, i, send, recv, reset ) \
    (u16)( \
    ((u16)((mod) << REG_EXI_JOYCNT_MOD_SHIFT)) | \
    ((u16)((i) << REG_EXI_JOYCNT_I_SHIFT)) | \
    ((u16)((send) << REG_EXI_JOYCNT_SEND_SHIFT)) | \
    ((u16)((recv) << REG_EXI_JOYCNT_RECV_SHIFT)) | \
    ((u16)((reset) << REG_EXI_JOYCNT_RESET_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_JOY_RECV_RECVDATA_SHIFT 0
#define REG_EXI_JOY_RECV_RECVDATA_SIZE 32
#define REG_EXI_JOY_RECV_RECVDATA_MASK 0xFFFFFFFF

#ifndef SDK_ASM
#define REG_EXI_JOY_RECV_FIELD( recvdata ) \
    (u32)( \
    ((u32)((recvdata) << REG_EXI_JOY_RECV_RECVDATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_JOY_TRANS_SENDDATA_SHIFT 0
#define REG_EXI_JOY_TRANS_SENDDATA_SIZE 32
#define REG_EXI_JOY_TRANS_SENDDATA_MASK 0xFFFFFFFF

#ifndef SDK_ASM
#define REG_EXI_JOY_TRANS_FIELD( senddata ) \
    (u32)( \
    ((u32)((senddata) << REG_EXI_JOY_TRANS_SENDDATA_SHIFT)) )
#endif //SDK_ASM

#define REG_EXI_JOY_STAT_GEN_SHIFT 4
#define REG_EXI_JOY_STAT_GEN_SIZE 2
#define REG_EXI_JOY_STAT_GEN_MASK 0x30

#define REG_EXI_JOY_STAT_SSTATUS_SHIFT 3
#define REG_EXI_JOY_STAT_SSTATUS_SIZE 1
#define REG_EXI_JOY_STAT_SSTATUS_MASK 0x8

#define REG_EXI_JOY_STAT_RSTATUS_SHIFT 1
#define REG_EXI_JOY_STAT_RSTATUS_SIZE 1
#define REG_EXI_JOY_STAT_RSTATUS_MASK 0x2

#ifndef SDK_ASM
#define REG_EXI_JOY_STAT_FIELD( gen, sstatus, rstatus ) \
    (u16)( \
    ((u16)((gen) << REG_EXI_JOY_STAT_GEN_SHIFT)) | \
    ((u16)((sstatus) << REG_EXI_JOY_STAT_SSTATUS_SHIFT)) | \
    ((u16)((rstatus) << REG_EXI_JOY_STAT_RSTATUS_SHIFT)) )
#endif //SDK_ASM

#define REG_PXI_MAINPINTF_I_SHIFT 14
#define REG_PXI_MAINPINTF_I_SIZE 1
#define REG_PXI_MAINPINTF_I_MASK 0x4000

#define REG_PXI_MAINPINTF_IREQ_SHIFT 13
#define REG_PXI_MAINPINTF_IREQ_SIZE 1
#define REG_PXI_MAINPINTF_IREQ_MASK 0x2000

#define REG_PXI_MAINPINTF_A7STATUS_SHIFT 8
#define REG_PXI_MAINPINTF_A7STATUS_SIZE 4
#define REG_PXI_MAINPINTF_A7STATUS_MASK 0xF00

#define REG_PXI_MAINPINTF_A9STATUS_SHIFT 0
#define REG_PXI_MAINPINTF_A9STATUS_SIZE 4
#define REG_PXI_MAINPINTF_A9STATUS_MASK 0xF

#ifndef SDK_ASM
#define REG_PXI_MAINPINTF_FIELD( i, ireq, a7status, a9status ) \
    (u16)( \
    ((u16)((i) << REG_PXI_MAINPINTF_I_SHIFT)) | \
    ((u16)((ireq) << REG_PXI_MAINPINTF_IREQ_SHIFT)) | \
    ((u16)((a7status) << REG_PXI_MAINPINTF_A7STATUS_SHIFT)) | \
    ((u16)((a9status) << REG_PXI_MAINPINTF_A9STATUS_SHIFT)) )
#endif //SDK_ASM

#define REG_PXI_MAINP_FIFO_CNT_E_SHIFT 15
#define REG_PXI_MAINP_FIFO_CNT_E_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_E_MASK 0x8000

#define REG_PXI_MAINP_FIFO_CNT_ERR_SHIFT 14
#define REG_PXI_MAINP_FIFO_CNT_ERR_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_ERR_MASK 0x4000

#define REG_PXI_MAINP_FIFO_CNT_RECV_RI_SHIFT 10
#define REG_PXI_MAINP_FIFO_CNT_RECV_RI_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_RECV_RI_MASK 0x400

#define REG_PXI_MAINP_FIFO_CNT_RECV_FULL_SHIFT 9
#define REG_PXI_MAINP_FIFO_CNT_RECV_FULL_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_RECV_FULL_MASK 0x200

#define REG_PXI_MAINP_FIFO_CNT_RECV_EMP_SHIFT 8
#define REG_PXI_MAINP_FIFO_CNT_RECV_EMP_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_RECV_EMP_MASK 0x100

#define REG_PXI_MAINP_FIFO_CNT_SEND_CL_SHIFT 3
#define REG_PXI_MAINP_FIFO_CNT_SEND_CL_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_SEND_CL_MASK 0x8

#define REG_PXI_MAINP_FIFO_CNT_SEND_TI_SHIFT 2
#define REG_PXI_MAINP_FIFO_CNT_SEND_TI_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_SEND_TI_MASK 0x4

#define REG_PXI_MAINP_FIFO_CNT_SEND_FULL_SHIFT 1
#define REG_PXI_MAINP_FIFO_CNT_SEND_FULL_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_SEND_FULL_MASK 0x2

#define REG_PXI_MAINP_FIFO_CNT_SEND_EMP_SHIFT 0
#define REG_PXI_MAINP_FIFO_CNT_SEND_EMP_SIZE 1
#define REG_PXI_MAINP_FIFO_CNT_SEND_EMP_MASK 0x1

#ifndef SDK_ASM
#define REG_PXI_MAINP_FIFO_CNT_FIELD( e, err, recv_ri, recv_full, recv_emp, send_cl, send_ti, send_full, send_emp ) \
    (u16)( \
    ((u16)((e) << REG_PXI_MAINP_FIFO_CNT_E_SHIFT)) | \
    ((u16)((err) << REG_PXI_MAINP_FIFO_CNT_ERR_SHIFT)) | \
    ((u16)((recv_ri) << REG_PXI_MAINP_FIFO_CNT_RECV_RI_SHIFT)) | \
    ((u16)((recv_full) << REG_PXI_MAINP_FIFO_CNT_RECV_FULL_SHIFT)) | \
    ((u16)((recv_emp) << REG_PXI_MAINP_FIFO_CNT_RECV_EMP_SHIFT)) | \
    ((u16)((send_cl) << REG_PXI_MAINP_FIFO_CNT_SEND_CL_SHIFT)) | \
    ((u16)((send_ti) << REG_PXI_MAINP_FIFO_CNT_SEND_TI_SHIFT)) | \
    ((u16)((send_full) << REG_PXI_MAINP_FIFO_CNT_SEND_FULL_SHIFT)) | \
    ((u16)((send_emp) << REG_PXI_MAINP_FIFO_CNT_SEND_EMP_SHIFT)) )
#endif //SDK_ASM
#if !defined(SDK_TS)

#define REG_SPI_SPICNT_E_SHIFT 15
#define REG_SPI_SPICNT_E_SIZE 1
#define REG_SPI_SPICNT_E_MASK 0x8000

#define REG_SPI_SPICNT_I_SHIFT 14
#define REG_SPI_SPICNT_I_SIZE 1
#define REG_SPI_SPICNT_I_MASK 0x4000

#define REG_SPI_SPICNT_SEL_SHIFT 13
#define REG_SPI_SPICNT_SEL_SIZE 1
#define REG_SPI_SPICNT_SEL_MASK 0x2000

#define REG_SPI_SPICNT_MODE_SHIFT 12
#define REG_SPI_SPICNT_MODE_SIZE 1
#define REG_SPI_SPICNT_MODE_MASK 0x1000

#define REG_SPI_SPICNT_BUSY_SHIFT 7
#define REG_SPI_SPICNT_BUSY_SIZE 1
#define REG_SPI_SPICNT_BUSY_MASK 0x80

#define REG_SPI_SPICNT_BAUDRATE_SHIFT 0
#define REG_SPI_SPICNT_BAUDRATE_SIZE 2
#define REG_SPI_SPICNT_BAUDRATE_MASK 0x3

#ifndef SDK_ASM
#define REG_SPI_SPICNT_FIELD( e, i, sel, mode, busy, baudrate ) \
    (u16)( \
    ((u16)((e) << REG_SPI_SPICNT_E_SHIFT)) | \
    ((u16)((i) << REG_SPI_SPICNT_I_SHIFT)) | \
    ((u16)((sel) << REG_SPI_SPICNT_SEL_SHIFT)) | \
    ((u16)((mode) << REG_SPI_SPICNT_MODE_SHIFT)) | \
    ((u16)((busy) << REG_SPI_SPICNT_BUSY_SHIFT)) | \
    ((u16)((baudrate) << REG_SPI_SPICNT_BAUDRATE_SHIFT)) )
#endif //SDK_ASM
#endif //!defined(SDK_TS)
#if defined(SDK_TS)

#define REG_SPI_SPICNT_E_SHIFT 15
#define REG_SPI_SPICNT_E_SIZE 1
#define REG_SPI_SPICNT_E_MASK 0x8000

#define REG_SPI_SPICNT_I_SHIFT 14
#define REG_SPI_SPICNT_I_SIZE 1
#define REG_SPI_SPICNT_I_MASK 0x4000

#define REG_SPI_SPICNT_MODE_SHIFT 11
#define REG_SPI_SPICNT_MODE_SIZE 1
#define REG_SPI_SPICNT_MODE_MASK 0x800

#define REG_SPI_SPICNT_CLKMODE_SHIFT 10
#define REG_SPI_SPICNT_CLKMODE_SIZE 1
#define REG_SPI_SPICNT_CLKMODE_MASK 0x400

#define REG_SPI_SPICNT_SEL_SHIFT 8
#define REG_SPI_SPICNT_SEL_SIZE 2
#define REG_SPI_SPICNT_SEL_MASK 0x300

#define REG_SPI_SPICNT_BUSY_SHIFT 7
#define REG_SPI_SPICNT_BUSY_SIZE 1
#define REG_SPI_SPICNT_BUSY_MASK 0x80

#define REG_SPI_SPICNT_BAUDRATE_SHIFT 0
#define REG_SPI_SPICNT_BAUDRATE_SIZE 2
#define REG_SPI_SPICNT_BAUDRATE_MASK 0x3

#ifndef SDK_ASM
#define REG_SPI_SPICNT_FIELD( e, i, mode, clkmode, sel, busy, baudrate ) \
    (u16)( \
    ((u16)((e) << REG_SPI_SPICNT_E_SHIFT)) | \
    ((u16)((i) << REG_SPI_SPICNT_I_SHIFT)) | \
    ((u16)((mode) << REG_SPI_SPICNT_MODE_SHIFT)) | \
    ((u16)((clkmode) << REG_SPI_SPICNT_CLKMODE_SHIFT)) | \
    ((u16)((sel) << REG_SPI_SPICNT_SEL_SHIFT)) | \
    ((u16)((busy) << REG_SPI_SPICNT_BUSY_SHIFT)) | \
    ((u16)((baudrate) << REG_SPI_SPICNT_BAUDRATE_SHIFT)) )
#endif //SDK_ASM
#endif //defined(SDK_TS)

#define REG_SPI_SPID_DATA_SHIFT 0
#define REG_SPI_SPID_DATA_SIZE 8
#define REG_SPI_SPID_DATA_MASK 0xFF

#ifndef SDK_ASM
#define REG_SPI_SPID_FIELD( data ) \
    (u16)( \
    ((u16)((data) << REG_SPI_SPID_DATA_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_EXMEMCNT_L_EP_SHIFT 15
#define REG_MI_EXMEMCNT_L_EP_SIZE 1
#define REG_MI_EXMEMCNT_L_EP_MASK 0x8000

#define REG_MI_EXMEMCNT_L_MP_SHIFT 11
#define REG_MI_EXMEMCNT_L_MP_SIZE 1
#define REG_MI_EXMEMCNT_L_MP_MASK 0x800

#define REG_MI_EXMEMCNT_L_CP_SHIFT 7
#define REG_MI_EXMEMCNT_L_CP_SIZE 1
#define REG_MI_EXMEMCNT_L_CP_MASK 0x80

#define REG_MI_EXMEMCNT_L_PHI_SHIFT 5
#define REG_MI_EXMEMCNT_L_PHI_SIZE 2
#define REG_MI_EXMEMCNT_L_PHI_MASK 0x60

#define REG_MI_EXMEMCNT_L_ROM2nd_SHIFT 4
#define REG_MI_EXMEMCNT_L_ROM2nd_SIZE 1
#define REG_MI_EXMEMCNT_L_ROM2nd_MASK 0x10

#define REG_MI_EXMEMCNT_L_ROM1st_SHIFT 2
#define REG_MI_EXMEMCNT_L_ROM1st_SIZE 2
#define REG_MI_EXMEMCNT_L_ROM1st_MASK 0xC

#define REG_MI_EXMEMCNT_L_RAM_SHIFT 0
#define REG_MI_EXMEMCNT_L_RAM_SIZE 2
#define REG_MI_EXMEMCNT_L_RAM_MASK 0x3

#ifndef SDK_ASM
#define REG_MI_EXMEMCNT_L_FIELD( ep, mp, cp, phi, rom2nd, rom1st, ram ) \
    (u16)( \
    ((u16)((ep) << REG_MI_EXMEMCNT_L_EP_SHIFT)) | \
    ((u16)((mp) << REG_MI_EXMEMCNT_L_MP_SHIFT)) | \
    ((u16)((cp) << REG_MI_EXMEMCNT_L_CP_SHIFT)) | \
    ((u16)((phi) << REG_MI_EXMEMCNT_L_PHI_SHIFT)) | \
    ((u16)((rom2nd) << REG_MI_EXMEMCNT_L_ROM2nd_SHIFT)) | \
    ((u16)((rom1st) << REG_MI_EXMEMCNT_L_ROM1st_SHIFT)) | \
    ((u16)((ram) << REG_MI_EXMEMCNT_L_RAM_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_EXMEMCNT_H_PHI33M_SHIFT 7
#define REG_MI_EXMEMCNT_H_PHI33M_SIZE 1
#define REG_MI_EXMEMCNT_H_PHI33M_MASK 0x80

#define REG_MI_EXMEMCNT_H_WW1_2nd_SHIFT 5
#define REG_MI_EXMEMCNT_H_WW1_2nd_SIZE 1
#define REG_MI_EXMEMCNT_H_WW1_2nd_MASK 0x20

#define REG_MI_EXMEMCNT_H_WW1_1st_SHIFT 3
#define REG_MI_EXMEMCNT_H_WW1_1st_SIZE 2
#define REG_MI_EXMEMCNT_H_WW1_1st_MASK 0x18

#define REG_MI_EXMEMCNT_H_WW0_2nd_SHIFT 2
#define REG_MI_EXMEMCNT_H_WW0_2nd_SIZE 1
#define REG_MI_EXMEMCNT_H_WW0_2nd_MASK 0x4

#define REG_MI_EXMEMCNT_H_WW0_1st_SHIFT 0
#define REG_MI_EXMEMCNT_H_WW0_1st_SIZE 2
#define REG_MI_EXMEMCNT_H_WW0_1st_MASK 0x3

#ifndef SDK_ASM
#define REG_MI_EXMEMCNT_H_FIELD( phi33m, ww1_2nd, ww1_1st, ww0_2nd, ww0_1st ) \
    (u16)( \
    ((u16)((phi33m) << REG_MI_EXMEMCNT_H_PHI33M_SHIFT)) | \
    ((u16)((ww1_2nd) << REG_MI_EXMEMCNT_H_WW1_2nd_SHIFT)) | \
    ((u16)((ww1_1st) << REG_MI_EXMEMCNT_H_WW1_1st_SHIFT)) | \
    ((u16)((ww0_2nd) << REG_MI_EXMEMCNT_H_WW0_2nd_SHIFT)) | \
    ((u16)((ww0_1st) << REG_MI_EXMEMCNT_H_WW0_1st_SHIFT)) )
#endif //SDK_ASM

#define REG_OS_IE_WL_SHIFT 24
#define REG_OS_IE_WL_SIZE 1
#define REG_OS_IE_WL_MASK 0x1000000

#define REG_OS_IE_SPI_SHIFT 23
#define REG_OS_IE_SPI_SIZE 1
#define REG_OS_IE_SPI_MASK 0x800000

#define REG_OS_IE_PM_SHIFT 22
#define REG_OS_IE_PM_SIZE 1
#define REG_OS_IE_PM_MASK 0x400000

#define REG_OS_IE_MI_SHIFT 20
#define REG_OS_IE_MI_SIZE 1
#define REG_OS_IE_MI_MASK 0x100000

#define REG_OS_IE_MC_SHIFT 19
#define REG_OS_IE_MC_SIZE 1
#define REG_OS_IE_MC_MASK 0x80000

#define REG_OS_IE_IFN_SHIFT 18
#define REG_OS_IE_IFN_SIZE 1
#define REG_OS_IE_IFN_MASK 0x40000

#define REG_OS_IE_IFE_SHIFT 17
#define REG_OS_IE_IFE_SIZE 1
#define REG_OS_IE_IFE_MASK 0x20000

#define REG_OS_IE_A7_SHIFT 16
#define REG_OS_IE_A7_SIZE 1
#define REG_OS_IE_A7_MASK 0x10000

#define REG_OS_IE_I_D_SHIFT 13
#define REG_OS_IE_I_D_SIZE 1
#define REG_OS_IE_I_D_MASK 0x2000

#define REG_OS_IE_K_SHIFT 12
#define REG_OS_IE_K_SIZE 1
#define REG_OS_IE_K_MASK 0x1000

#define REG_OS_IE_D3_SHIFT 11
#define REG_OS_IE_D3_SIZE 1
#define REG_OS_IE_D3_MASK 0x800

#define REG_OS_IE_D2_SHIFT 10
#define REG_OS_IE_D2_SIZE 1
#define REG_OS_IE_D2_MASK 0x400

#define REG_OS_IE_D1_SHIFT 9
#define REG_OS_IE_D1_SIZE 1
#define REG_OS_IE_D1_MASK 0x200

#define REG_OS_IE_D0_SHIFT 8
#define REG_OS_IE_D0_SIZE 1
#define REG_OS_IE_D0_MASK 0x100

#define REG_OS_IE_T3_SHIFT 6
#define REG_OS_IE_T3_SIZE 1
#define REG_OS_IE_T3_MASK 0x40

#define REG_OS_IE_T2_SHIFT 5
#define REG_OS_IE_T2_SIZE 1
#define REG_OS_IE_T2_MASK 0x20

#define REG_OS_IE_T1_SHIFT 4
#define REG_OS_IE_T1_SIZE 1
#define REG_OS_IE_T1_MASK 0x10

#define REG_OS_IE_T0_SHIFT 3
#define REG_OS_IE_T0_SIZE 1
#define REG_OS_IE_T0_MASK 0x8

#define REG_OS_IE_VE_SHIFT 2
#define REG_OS_IE_VE_SIZE 1
#define REG_OS_IE_VE_MASK 0x4

#define REG_OS_IE_HB_SHIFT 1
#define REG_OS_IE_HB_SIZE 1
#define REG_OS_IE_HB_MASK 0x2

#define REG_OS_IE_VB_SHIFT 0
#define REG_OS_IE_VB_SIZE 1
#define REG_OS_IE_VB_MASK 0x1

#ifndef SDK_ASM
#define REG_OS_IE_FIELD( wl, spi, pm, mi, mc, ifn, ife, a7, i_d, k, d3, d2, d1, d0, t3, t2, t1, t0, ve, hb, vb ) \
    (u32)( \
    ((u32)((wl) << REG_OS_IE_WL_SHIFT)) | \
    ((u32)((spi) << REG_OS_IE_SPI_SHIFT)) | \
    ((u32)((pm) << REG_OS_IE_PM_SHIFT)) | \
    ((u32)((mi) << REG_OS_IE_MI_SHIFT)) | \
    ((u32)((mc) << REG_OS_IE_MC_SHIFT)) | \
    ((u32)((ifn) << REG_OS_IE_IFN_SHIFT)) | \
    ((u32)((ife) << REG_OS_IE_IFE_SHIFT)) | \
    ((u32)((a7) << REG_OS_IE_A7_SHIFT)) | \
    ((u32)((i_d) << REG_OS_IE_I_D_SHIFT)) | \
    ((u32)((k) << REG_OS_IE_K_SHIFT)) | \
    ((u32)((d3) << REG_OS_IE_D3_SHIFT)) | \
    ((u32)((d2) << REG_OS_IE_D2_SHIFT)) | \
    ((u32)((d1) << REG_OS_IE_D1_SHIFT)) | \
    ((u32)((d0) << REG_OS_IE_D0_SHIFT)) | \
    ((u32)((t3) << REG_OS_IE_T3_SHIFT)) | \
    ((u32)((t2) << REG_OS_IE_T2_SHIFT)) | \
    ((u32)((t1) << REG_OS_IE_T1_SHIFT)) | \
    ((u32)((t0) << REG_OS_IE_T0_SHIFT)) | \
    ((u32)((ve) << REG_OS_IE_VE_SHIFT)) | \
    ((u32)((hb) << REG_OS_IE_HB_SHIFT)) | \
    ((u32)((vb) << REG_OS_IE_VB_SHIFT)) )
#endif //SDK_ASM

#define REG_OS_IF_WL_SHIFT 24
#define REG_OS_IF_WL_SIZE 1
#define REG_OS_IF_WL_MASK 0x1000000

#define REG_OS_IF_SPI_SHIFT 23
#define REG_OS_IF_SPI_SIZE 1
#define REG_OS_IF_SPI_MASK 0x800000

#define REG_OS_IF_PM_SHIFT 22
#define REG_OS_IF_PM_SIZE 1
#define REG_OS_IF_PM_MASK 0x400000

#define REG_OS_IF_MI_SHIFT 20
#define REG_OS_IF_MI_SIZE 1
#define REG_OS_IF_MI_MASK 0x100000

#define REG_OS_IF_MC_SHIFT 19
#define REG_OS_IF_MC_SIZE 1
#define REG_OS_IF_MC_MASK 0x80000

#define REG_OS_IF_IFN_SHIFT 18
#define REG_OS_IF_IFN_SIZE 1
#define REG_OS_IF_IFN_MASK 0x40000

#define REG_OS_IF_IFE_SHIFT 17
#define REG_OS_IF_IFE_SIZE 1
#define REG_OS_IF_IFE_MASK 0x20000

#define REG_OS_IF_A7_SHIFT 16
#define REG_OS_IF_A7_SIZE 1
#define REG_OS_IF_A7_MASK 0x10000

#define REG_OS_IF_I_D_SHIFT 13
#define REG_OS_IF_I_D_SIZE 1
#define REG_OS_IF_I_D_MASK 0x2000

#define REG_OS_IF_K_SHIFT 12
#define REG_OS_IF_K_SIZE 1
#define REG_OS_IF_K_MASK 0x1000

#define REG_OS_IF_D3_SHIFT 11
#define REG_OS_IF_D3_SIZE 1
#define REG_OS_IF_D3_MASK 0x800

#define REG_OS_IF_D2_SHIFT 10
#define REG_OS_IF_D2_SIZE 1
#define REG_OS_IF_D2_MASK 0x400

#define REG_OS_IF_D1_SHIFT 9
#define REG_OS_IF_D1_SIZE 1
#define REG_OS_IF_D1_MASK 0x200

#define REG_OS_IF_D0_SHIFT 8
#define REG_OS_IF_D0_SIZE 1
#define REG_OS_IF_D0_MASK 0x100

#define REG_OS_IF_T3_SHIFT 6
#define REG_OS_IF_T3_SIZE 1
#define REG_OS_IF_T3_MASK 0x40

#define REG_OS_IF_T2_SHIFT 5
#define REG_OS_IF_T2_SIZE 1
#define REG_OS_IF_T2_MASK 0x20

#define REG_OS_IF_T1_SHIFT 4
#define REG_OS_IF_T1_SIZE 1
#define REG_OS_IF_T1_MASK 0x10

#define REG_OS_IF_T0_SHIFT 3
#define REG_OS_IF_T0_SIZE 1
#define REG_OS_IF_T0_MASK 0x8

#define REG_OS_IF_VE_SHIFT 2
#define REG_OS_IF_VE_SIZE 1
#define REG_OS_IF_VE_MASK 0x4

#define REG_OS_IF_HB_SHIFT 1
#define REG_OS_IF_HB_SIZE 1
#define REG_OS_IF_HB_MASK 0x2

#define REG_OS_IF_VB_SHIFT 0
#define REG_OS_IF_VB_SIZE 1
#define REG_OS_IF_VB_MASK 0x1

#ifndef SDK_ASM
#define REG_OS_IF_FIELD( wl, spi, pm, mi, mc, ifn, ife, a7, i_d, k, d3, d2, d1, d0, t3, t2, t1, t0, ve, hb, vb ) \
    (u32)( \
    ((u32)((wl) << REG_OS_IF_WL_SHIFT)) | \
    ((u32)((spi) << REG_OS_IF_SPI_SHIFT)) | \
    ((u32)((pm) << REG_OS_IF_PM_SHIFT)) | \
    ((u32)((mi) << REG_OS_IF_MI_SHIFT)) | \
    ((u32)((mc) << REG_OS_IF_MC_SHIFT)) | \
    ((u32)((ifn) << REG_OS_IF_IFN_SHIFT)) | \
    ((u32)((ife) << REG_OS_IF_IFE_SHIFT)) | \
    ((u32)((a7) << REG_OS_IF_A7_SHIFT)) | \
    ((u32)((i_d) << REG_OS_IF_I_D_SHIFT)) | \
    ((u32)((k) << REG_OS_IF_K_SHIFT)) | \
    ((u32)((d3) << REG_OS_IF_D3_SHIFT)) | \
    ((u32)((d2) << REG_OS_IF_D2_SHIFT)) | \
    ((u32)((d1) << REG_OS_IF_D1_SHIFT)) | \
    ((u32)((d0) << REG_OS_IF_D0_SHIFT)) | \
    ((u32)((t3) << REG_OS_IF_T3_SHIFT)) | \
    ((u32)((t2) << REG_OS_IF_T2_SHIFT)) | \
    ((u32)((t1) << REG_OS_IF_T1_SHIFT)) | \
    ((u32)((t0) << REG_OS_IF_T0_SHIFT)) | \
    ((u32)((ve) << REG_OS_IF_VE_SHIFT)) | \
    ((u32)((hb) << REG_OS_IF_HB_SHIFT)) | \
    ((u32)((vb) << REG_OS_IF_VB_SHIFT)) )
#endif //SDK_ASM

#define REG_MI_WVRAMSTAT_WRAM_1_SHIFT 9
#define REG_MI_WVRAMSTAT_WRAM_1_SIZE 1
#define REG_MI_WVRAMSTAT_WRAM_1_MASK 0x200

#define REG_MI_WVRAMSTAT_WRAM_0_SHIFT 8
#define REG_MI_WVRAMSTAT_WRAM_0_SIZE 1
#define REG_MI_WVRAMSTAT_WRAM_0_MASK 0x100

#define REG_MI_WVRAMSTAT_VRAM_D_SHIFT 1
#define REG_MI_WVRAMSTAT_VRAM_D_SIZE 1
#define REG_MI_WVRAMSTAT_VRAM_D_MASK 0x2

#define REG_MI_WVRAMSTAT_VRAM_C_SHIFT 0
#define REG_MI_WVRAMSTAT_VRAM_C_SIZE 1
#define REG_MI_WVRAMSTAT_VRAM_C_MASK 0x1

#ifndef SDK_ASM
#define REG_MI_WVRAMSTAT_FIELD( wram_1, wram_0, vram_d, vram_c ) \
    (u16)( \
    ((u16)((wram_1) << REG_MI_WVRAMSTAT_WRAM_1_SHIFT)) | \
    ((u16)((wram_0) << REG_MI_WVRAMSTAT_WRAM_0_SHIFT)) | \
    ((u16)((vram_d) << REG_MI_WVRAMSTAT_VRAM_D_SHIFT)) | \
    ((u16)((vram_c) << REG_MI_WVRAMSTAT_VRAM_C_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_POWCNT_EWL_SHIFT 1
#define REG_SND_POWCNT_EWL_SIZE 1
#define REG_SND_POWCNT_EWL_MASK 0x2

#define REG_SND_POWCNT_SPE_SHIFT 0
#define REG_SND_POWCNT_SPE_SIZE 1
#define REG_SND_POWCNT_SPE_MASK 0x1

#ifndef SDK_ASM
#define REG_SND_POWCNT_FIELD( ewl, spe ) \
    (u16)( \
    ((u16)((ewl) << REG_SND_POWCNT_EWL_SHIFT)) | \
    ((u16)((spe) << REG_SND_POWCNT_SPE_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0CNT_E_SHIFT 31
#define REG_SND_SOUND0CNT_E_SIZE 1
#define REG_SND_SOUND0CNT_E_MASK 0x80000000

#define REG_SND_SOUND0CNT_FORMAT_SHIFT 29
#define REG_SND_SOUND0CNT_FORMAT_SIZE 2
#define REG_SND_SOUND0CNT_FORMAT_MASK 0x60000000

#define REG_SND_SOUND0CNT_REPEAT_SHIFT 27
#define REG_SND_SOUND0CNT_REPEAT_SIZE 2
#define REG_SND_SOUND0CNT_REPEAT_MASK 0x18000000

#define REG_SND_SOUND0CNT_DUTY_SHIFT 24
#define REG_SND_SOUND0CNT_DUTY_SIZE 3
#define REG_SND_SOUND0CNT_DUTY_MASK 0x7000000

#define REG_SND_SOUND0CNT_PAN_SHIFT 16
#define REG_SND_SOUND0CNT_PAN_SIZE 7
#define REG_SND_SOUND0CNT_PAN_MASK 0x7F0000

#define REG_SND_SOUND0CNT_HOLD_SHIFT 15
#define REG_SND_SOUND0CNT_HOLD_SIZE 1
#define REG_SND_SOUND0CNT_HOLD_MASK 0x8000

#define REG_SND_SOUND0CNT_SHIFT_SHIFT 8
#define REG_SND_SOUND0CNT_SHIFT_SIZE 2
#define REG_SND_SOUND0CNT_SHIFT_MASK 0x300

#define REG_SND_SOUND0CNT_VOLUME_SHIFT 0
#define REG_SND_SOUND0CNT_VOLUME_SIZE 7
#define REG_SND_SOUND0CNT_VOLUME_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUND0CNT_FIELD( e, format, repeat, duty, pan, hold, shift, volume ) \
    (u32)( \
    ((u32)((e) << REG_SND_SOUND0CNT_E_SHIFT)) | \
    ((u32)((format) << REG_SND_SOUND0CNT_FORMAT_SHIFT)) | \
    ((u32)((repeat) << REG_SND_SOUND0CNT_REPEAT_SHIFT)) | \
    ((u32)((duty) << REG_SND_SOUND0CNT_DUTY_SHIFT)) | \
    ((u32)((pan) << REG_SND_SOUND0CNT_PAN_SHIFT)) | \
    ((u32)((hold) << REG_SND_SOUND0CNT_HOLD_SHIFT)) | \
    ((u32)((shift) << REG_SND_SOUND0CNT_SHIFT_SHIFT)) | \
    ((u32)((volume) << REG_SND_SOUND0CNT_VOLUME_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0CNT_VOL_16_HOLD_SHIFT 15
#define REG_SND_SOUND0CNT_VOL_16_HOLD_SIZE 1
#define REG_SND_SOUND0CNT_VOL_16_HOLD_MASK 0x8000

#define REG_SND_SOUND0CNT_VOL_16_SHIFT_SHIFT 8
#define REG_SND_SOUND0CNT_VOL_16_SHIFT_SIZE 2
#define REG_SND_SOUND0CNT_VOL_16_SHIFT_MASK 0x300

#define REG_SND_SOUND0CNT_VOL_16_VOLUME_SHIFT 0
#define REG_SND_SOUND0CNT_VOL_16_VOLUME_SIZE 7
#define REG_SND_SOUND0CNT_VOL_16_VOLUME_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUND0CNT_VOL_16_FIELD( hold, shift, volume ) \
    (u16)( \
    ((u16)((hold) << REG_SND_SOUND0CNT_VOL_16_HOLD_SHIFT)) | \
    ((u16)((shift) << REG_SND_SOUND0CNT_VOL_16_SHIFT_SHIFT)) | \
    ((u16)((volume) << REG_SND_SOUND0CNT_VOL_16_VOLUME_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0CNT_VOL_VOLUME_SHIFT 0
#define REG_SND_SOUND0CNT_VOL_VOLUME_SIZE 7
#define REG_SND_SOUND0CNT_VOL_VOLUME_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUND0CNT_VOL_FIELD( volume ) \
    (u8)( \
    ((u8)((volume) << REG_SND_SOUND0CNT_VOL_VOLUME_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0CNT_PAN_PAN_SHIFT 0
#define REG_SND_SOUND0CNT_PAN_PAN_SIZE 7
#define REG_SND_SOUND0CNT_PAN_PAN_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUND0CNT_PAN_FIELD( pan ) \
    (u8)( \
    ((u8)((pan) << REG_SND_SOUND0CNT_PAN_PAN_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0CNT_8_E_SHIFT 7
#define REG_SND_SOUND0CNT_8_E_SIZE 1
#define REG_SND_SOUND0CNT_8_E_MASK 0x80

#define REG_SND_SOUND0CNT_8_FORMAT_SHIFT 5
#define REG_SND_SOUND0CNT_8_FORMAT_SIZE 2
#define REG_SND_SOUND0CNT_8_FORMAT_MASK 0x60

#define REG_SND_SOUND0CNT_8_REPEAT_SHIFT 3
#define REG_SND_SOUND0CNT_8_REPEAT_SIZE 2
#define REG_SND_SOUND0CNT_8_REPEAT_MASK 0x18

#define REG_SND_SOUND0CNT_8_DUTY_SHIFT 0
#define REG_SND_SOUND0CNT_8_DUTY_SIZE 3
#define REG_SND_SOUND0CNT_8_DUTY_MASK 0x7

#ifndef SDK_ASM
#define REG_SND_SOUND0CNT_8_FIELD( e, format, repeat, duty ) \
    (u8)( \
    ((u8)((e) << REG_SND_SOUND0CNT_8_E_SHIFT)) | \
    ((u8)((format) << REG_SND_SOUND0CNT_8_FORMAT_SHIFT)) | \
    ((u8)((repeat) << REG_SND_SOUND0CNT_8_REPEAT_SHIFT)) | \
    ((u8)((duty) << REG_SND_SOUND0CNT_8_DUTY_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0SAD_SRC_SHIFT 0
#define REG_SND_SOUND0SAD_SRC_SIZE 27
#define REG_SND_SOUND0SAD_SRC_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_SND_SOUND0SAD_FIELD( src ) \
    (u32)( \
    ((u32)((src) << REG_SND_SOUND0SAD_SRC_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0TMR_TIMER_SHIFT 0
#define REG_SND_SOUND0TMR_TIMER_SIZE 16
#define REG_SND_SOUND0TMR_TIMER_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_SND_SOUND0TMR_FIELD( timer ) \
    (u16)( \
    ((u16)((timer) << REG_SND_SOUND0TMR_TIMER_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0RPT_PT_POINT_SHIFT 0
#define REG_SND_SOUND0RPT_PT_POINT_SIZE 16
#define REG_SND_SOUND0RPT_PT_POINT_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_SND_SOUND0RPT_PT_FIELD( point ) \
    (u16)( \
    ((u16)((point) << REG_SND_SOUND0RPT_PT_POINT_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUND0RPT_LEN_LEN_SHIFT 0
#define REG_SND_SOUND0RPT_LEN_LEN_SIZE 22
#define REG_SND_SOUND0RPT_LEN_LEN_MASK 0x3FFFFF

#ifndef SDK_ASM
#define REG_SND_SOUND0RPT_LEN_FIELD( len ) \
    (u32)( \
    ((u32)((len) << REG_SND_SOUND0RPT_LEN_LEN_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUNDCNT_E_SHIFT 15
#define REG_SND_SOUNDCNT_E_SIZE 1
#define REG_SND_SOUNDCNT_E_MASK 0x8000

#define REG_SND_SOUNDCNT_MIX_CH3_SHIFT 13
#define REG_SND_SOUNDCNT_MIX_CH3_SIZE 1
#define REG_SND_SOUNDCNT_MIX_CH3_MASK 0x2000

#define REG_SND_SOUNDCNT_MIX_CH1_SHIFT 12
#define REG_SND_SOUNDCNT_MIX_CH1_SIZE 1
#define REG_SND_SOUNDCNT_MIX_CH1_MASK 0x1000

#define REG_SND_SOUNDCNT_ROUT_SHIFT 10
#define REG_SND_SOUNDCNT_ROUT_SIZE 2
#define REG_SND_SOUNDCNT_ROUT_MASK 0xC00

#define REG_SND_SOUNDCNT_LOUT_SHIFT 8
#define REG_SND_SOUNDCNT_LOUT_SIZE 2
#define REG_SND_SOUNDCNT_LOUT_MASK 0x300

#define REG_SND_SOUNDCNT_VOLUME_SHIFT 0
#define REG_SND_SOUNDCNT_VOLUME_SIZE 7
#define REG_SND_SOUNDCNT_VOLUME_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUNDCNT_FIELD( e, mix_ch3, mix_ch1, rout, lout, volume ) \
    (u16)( \
    ((u16)((e) << REG_SND_SOUNDCNT_E_SHIFT)) | \
    ((u16)((mix_ch3) << REG_SND_SOUNDCNT_MIX_CH3_SHIFT)) | \
    ((u16)((mix_ch1) << REG_SND_SOUNDCNT_MIX_CH1_SHIFT)) | \
    ((u16)((rout) << REG_SND_SOUNDCNT_ROUT_SHIFT)) | \
    ((u16)((lout) << REG_SND_SOUNDCNT_LOUT_SHIFT)) | \
    ((u16)((volume) << REG_SND_SOUNDCNT_VOLUME_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUNDCNT_8_E_SHIFT 7
#define REG_SND_SOUNDCNT_8_E_SIZE 1
#define REG_SND_SOUNDCNT_8_E_MASK 0x80

#define REG_SND_SOUNDCNT_8_MIX_CH3_SHIFT 5
#define REG_SND_SOUNDCNT_8_MIX_CH3_SIZE 1
#define REG_SND_SOUNDCNT_8_MIX_CH3_MASK 0x20

#define REG_SND_SOUNDCNT_8_MIX_CH1_SHIFT 4
#define REG_SND_SOUNDCNT_8_MIX_CH1_SIZE 1
#define REG_SND_SOUNDCNT_8_MIX_CH1_MASK 0x10

#define REG_SND_SOUNDCNT_8_ROUT_SHIFT 2
#define REG_SND_SOUNDCNT_8_ROUT_SIZE 2
#define REG_SND_SOUNDCNT_8_ROUT_MASK 0xC

#define REG_SND_SOUNDCNT_8_LOUT_SHIFT 0
#define REG_SND_SOUNDCNT_8_LOUT_SIZE 2
#define REG_SND_SOUNDCNT_8_LOUT_MASK 0x3

#ifndef SDK_ASM
#define REG_SND_SOUNDCNT_8_FIELD( e, mix_ch3, mix_ch1, rout, lout ) \
    (u8)( \
    ((u8)((e) << REG_SND_SOUNDCNT_8_E_SHIFT)) | \
    ((u8)((mix_ch3) << REG_SND_SOUNDCNT_8_MIX_CH3_SHIFT)) | \
    ((u8)((mix_ch1) << REG_SND_SOUNDCNT_8_MIX_CH1_SHIFT)) | \
    ((u8)((rout) << REG_SND_SOUNDCNT_8_ROUT_SHIFT)) | \
    ((u8)((lout) << REG_SND_SOUNDCNT_8_LOUT_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SOUNDCNT_VOL_VOLUME_SHIFT 0
#define REG_SND_SOUNDCNT_VOL_VOLUME_SIZE 7
#define REG_SND_SOUNDCNT_VOL_VOLUME_MASK 0x7F

#ifndef SDK_ASM
#define REG_SND_SOUNDCNT_VOL_FIELD( volume ) \
    (u8)( \
    ((u8)((volume) << REG_SND_SOUNDCNT_VOL_VOLUME_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAPCNT_CAP1_E_SHIFT 15
#define REG_SND_SNDCAPCNT_CAP1_E_SIZE 1
#define REG_SND_SNDCAPCNT_CAP1_E_MASK 0x8000

#define REG_SND_SNDCAPCNT_CAP1_FORMAT_SHIFT 11
#define REG_SND_SNDCAPCNT_CAP1_FORMAT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP1_FORMAT_MASK 0x800

#define REG_SND_SNDCAPCNT_CAP1_REPEAT_SHIFT 10
#define REG_SND_SNDCAPCNT_CAP1_REPEAT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP1_REPEAT_MASK 0x400

#define REG_SND_SNDCAPCNT_CAP1_IN_SHIFT 9
#define REG_SND_SNDCAPCNT_CAP1_IN_SIZE 1
#define REG_SND_SNDCAPCNT_CAP1_IN_MASK 0x200

#define REG_SND_SNDCAPCNT_CAP1_OUT_SHIFT 8
#define REG_SND_SNDCAPCNT_CAP1_OUT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP1_OUT_MASK 0x100

#define REG_SND_SNDCAPCNT_CAP0_E_SHIFT 7
#define REG_SND_SNDCAPCNT_CAP0_E_SIZE 1
#define REG_SND_SNDCAPCNT_CAP0_E_MASK 0x80

#define REG_SND_SNDCAPCNT_CAP0_FORMAT_SHIFT 3
#define REG_SND_SNDCAPCNT_CAP0_FORMAT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP0_FORMAT_MASK 0x8

#define REG_SND_SNDCAPCNT_CAP0_REPEAT_SHIFT 2
#define REG_SND_SNDCAPCNT_CAP0_REPEAT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP0_REPEAT_MASK 0x4

#define REG_SND_SNDCAPCNT_CAP0_IN_SHIFT 1
#define REG_SND_SNDCAPCNT_CAP0_IN_SIZE 1
#define REG_SND_SNDCAPCNT_CAP0_IN_MASK 0x2

#define REG_SND_SNDCAPCNT_CAP0_OUT_SHIFT 0
#define REG_SND_SNDCAPCNT_CAP0_OUT_SIZE 1
#define REG_SND_SNDCAPCNT_CAP0_OUT_MASK 0x1

#ifndef SDK_ASM
#define REG_SND_SNDCAPCNT_FIELD( cap1_e, cap1_format, cap1_repeat, cap1_in, cap1_out, cap0_e, cap0_format, cap0_repeat, cap0_in, cap0_out ) \
    (u16)( \
    ((u16)((cap1_e) << REG_SND_SNDCAPCNT_CAP1_E_SHIFT)) | \
    ((u16)((cap1_format) << REG_SND_SNDCAPCNT_CAP1_FORMAT_SHIFT)) | \
    ((u16)((cap1_repeat) << REG_SND_SNDCAPCNT_CAP1_REPEAT_SHIFT)) | \
    ((u16)((cap1_in) << REG_SND_SNDCAPCNT_CAP1_IN_SHIFT)) | \
    ((u16)((cap1_out) << REG_SND_SNDCAPCNT_CAP1_OUT_SHIFT)) | \
    ((u16)((cap0_e) << REG_SND_SNDCAPCNT_CAP0_E_SHIFT)) | \
    ((u16)((cap0_format) << REG_SND_SNDCAPCNT_CAP0_FORMAT_SHIFT)) | \
    ((u16)((cap0_repeat) << REG_SND_SNDCAPCNT_CAP0_REPEAT_SHIFT)) | \
    ((u16)((cap0_in) << REG_SND_SNDCAPCNT_CAP0_IN_SHIFT)) | \
    ((u16)((cap0_out) << REG_SND_SNDCAPCNT_CAP0_OUT_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP0CNT_E_SHIFT 7
#define REG_SND_SNDCAP0CNT_E_SIZE 1
#define REG_SND_SNDCAP0CNT_E_MASK 0x80

#define REG_SND_SNDCAP0CNT_FORMAT_SHIFT 3
#define REG_SND_SNDCAP0CNT_FORMAT_SIZE 1
#define REG_SND_SNDCAP0CNT_FORMAT_MASK 0x8

#define REG_SND_SNDCAP0CNT_REPEAT_SHIFT 2
#define REG_SND_SNDCAP0CNT_REPEAT_SIZE 1
#define REG_SND_SNDCAP0CNT_REPEAT_MASK 0x4

#define REG_SND_SNDCAP0CNT_IN_SHIFT 1
#define REG_SND_SNDCAP0CNT_IN_SIZE 1
#define REG_SND_SNDCAP0CNT_IN_MASK 0x2

#define REG_SND_SNDCAP0CNT_OUT_SHIFT 0
#define REG_SND_SNDCAP0CNT_OUT_SIZE 1
#define REG_SND_SNDCAP0CNT_OUT_MASK 0x1

#ifndef SDK_ASM
#define REG_SND_SNDCAP0CNT_FIELD( e, format, repeat, in, out ) \
    (u8)( \
    ((u8)((e) << REG_SND_SNDCAP0CNT_E_SHIFT)) | \
    ((u8)((format) << REG_SND_SNDCAP0CNT_FORMAT_SHIFT)) | \
    ((u8)((repeat) << REG_SND_SNDCAP0CNT_REPEAT_SHIFT)) | \
    ((u8)((in) << REG_SND_SNDCAP0CNT_IN_SHIFT)) | \
    ((u8)((out) << REG_SND_SNDCAP0CNT_OUT_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP1CNT_E_SHIFT 7
#define REG_SND_SNDCAP1CNT_E_SIZE 1
#define REG_SND_SNDCAP1CNT_E_MASK 0x80

#define REG_SND_SNDCAP1CNT_FORMAT_SHIFT 3
#define REG_SND_SNDCAP1CNT_FORMAT_SIZE 1
#define REG_SND_SNDCAP1CNT_FORMAT_MASK 0x8

#define REG_SND_SNDCAP1CNT_REPEAT_SHIFT 2
#define REG_SND_SNDCAP1CNT_REPEAT_SIZE 1
#define REG_SND_SNDCAP1CNT_REPEAT_MASK 0x4

#define REG_SND_SNDCAP1CNT_IN_SHIFT 1
#define REG_SND_SNDCAP1CNT_IN_SIZE 1
#define REG_SND_SNDCAP1CNT_IN_MASK 0x2

#define REG_SND_SNDCAP1CNT_OUT_SHIFT 0
#define REG_SND_SNDCAP1CNT_OUT_SIZE 1
#define REG_SND_SNDCAP1CNT_OUT_MASK 0x1

#ifndef SDK_ASM
#define REG_SND_SNDCAP1CNT_FIELD( e, format, repeat, in, out ) \
    (u8)( \
    ((u8)((e) << REG_SND_SNDCAP1CNT_E_SHIFT)) | \
    ((u8)((format) << REG_SND_SNDCAP1CNT_FORMAT_SHIFT)) | \
    ((u8)((repeat) << REG_SND_SNDCAP1CNT_REPEAT_SHIFT)) | \
    ((u8)((in) << REG_SND_SNDCAP1CNT_IN_SHIFT)) | \
    ((u8)((out) << REG_SND_SNDCAP1CNT_OUT_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP0DAD_DEST_SHIFT 0
#define REG_SND_SNDCAP0DAD_DEST_SIZE 27
#define REG_SND_SNDCAP0DAD_DEST_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_SND_SNDCAP0DAD_FIELD( dest ) \
    (u32)( \
    ((u32)((dest) << REG_SND_SNDCAP0DAD_DEST_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP0LEN_LEN_SHIFT 0
#define REG_SND_SNDCAP0LEN_LEN_SIZE 16
#define REG_SND_SNDCAP0LEN_LEN_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_SND_SNDCAP0LEN_FIELD( len ) \
    (u16)( \
    ((u16)((len) << REG_SND_SNDCAP0LEN_LEN_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP1DAD_DEST_SHIFT 0
#define REG_SND_SNDCAP1DAD_DEST_SIZE 27
#define REG_SND_SNDCAP1DAD_DEST_MASK 0x7FFFFFF

#ifndef SDK_ASM
#define REG_SND_SNDCAP1DAD_FIELD( dest ) \
    (u32)( \
    ((u32)((dest) << REG_SND_SNDCAP1DAD_DEST_SHIFT)) )
#endif //SDK_ASM

#define REG_SND_SNDCAP1LEN_LEN_SHIFT 0
#define REG_SND_SNDCAP1LEN_LEN_SIZE 16
#define REG_SND_SNDCAP1LEN_LEN_MASK 0xFFFF

#ifndef SDK_ASM
#define REG_SND_SNDCAP1LEN_FIELD( len ) \
    (u16)( \
    ((u16)((len) << REG_SND_SNDCAP1LEN_LEN_SHIFT)) )
#endif //SDK_ASM

#endif //NITRO_HW_ARM7_IO_REG_H_
